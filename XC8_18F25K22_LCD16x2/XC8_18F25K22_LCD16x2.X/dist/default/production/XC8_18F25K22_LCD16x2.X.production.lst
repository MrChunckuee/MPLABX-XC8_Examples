

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Aug 16 01:16:02 2020

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    26  0000                     
    27                           ; Version 1.42
    28                           ; Generated 13/04/2017 GMT
    29                           ; 
    30                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC18F25K22 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     
    62                           	psect	idataCOMRAM
    63  000C32                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _text_1
    67  000C32  20                 	db	32
    68  000C33  20                 	db	32
    69  000C34  4D                 	db	77
    70  000C35  72                 	db	114
    71  000C36  43                 	db	67
    72  000C37  68                 	db	104
    73  000C38  75                 	db	117
    74  000C39  6E                 	db	110
    75  000C3A  63                 	db	99
    76  000C3B  6B                 	db	107
    77  000C3C  75                 	db	117
    78  000C3D  65                 	db	101
    79  000C3E  65                 	db	101
    80  000C3F  21                 	db	33
    81  000C40  20                 	db	32
    82  000C41  20                 	db	32
    83  000C42  00                 	db	0
    84                           
    85                           ;initializer for main@F6846
    86  000C43  81                 	db	129
    87  000C44  0F                 	db	15
    88  000C45  08                 	db	8
    89  000C46  2C                 	db	44
    90  000C47  3E                 	db	62
    91                           
    92                           	psect	idataBANK0
    93  000BF0                     __pidataBANK0:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _text_2
    97  000BF0  68                 	db	104
    98  000BF1  74                 	db	116
    99  000BF2  74                 	db	116
   100  000BF3  70                 	db	112
   101  000BF4  3A                 	db	58
   102  000BF5  2F                 	db	47
   103  000BF6  2F                 	db	47
   104  000BF7  6D                 	db	109
   105  000BF8  72                 	db	114
   106  000BF9  63                 	db	99
   107  000BFA  68                 	db	104
   108  000BFB  75                 	db	117
   109  000BFC  6E                 	db	110
   110  000BFD  63                 	db	99
   111  000BFE  6B                 	db	107
   112  000BFF  75                 	db	117
   113  000C00  65                 	db	101
   114  000C01  65                 	db	101
   115  000C02  2E                 	db	46
   116  000C03  62                 	db	98
   117  000C04  6C                 	db	108
   118  000C05  6F                 	db	111
   119  000C06  67                 	db	103
   120  000C07  73                 	db	115
   121  000C08  70                 	db	112
   122  000C09  6F                 	db	111
   123  000C0A  74                 	db	116
   124  000C0B  2E                 	db	46
   125  000C0C  63                 	db	99
   126  000C0D  6F                 	db	111
   127  000C0E  6D                 	db	109
   128  000C0F  2F                 	db	47
   129  000C10  00                 	db	0
   130  0000                     _ANSELC	set	3898
   131  0000                     _ANSELB	set	3897
   132  0000                     _ANSELA	set	3896
   133  0000                     _RCONbits	set	4048
   134  0000                     _INTCON2bits	set	4081
   135  0000                     _T0CONbits	set	4053
   136  0000                     _TRISCbits	set	3988
   137  0000                     _OSCCONbits	set	4051
   138  0000                     _TMR0L	set	4054
   139  0000                     _TMR0H	set	4055
   140  0000                     _PORTCbits	set	3970
   141  0000                     _INTCONbits	set	4082
   142  0000                     _TRISC	set	3988
   143  0000                     _PORTC	set	3970
   144  0000                     _TRISB	set	3987
   145  0000                     _TRISA	set	3986
   146  0000                     _PORTA	set	3968
   147  0000                     _PORTB	set	3969
   148                           
   149                           	psect	smallconst
   150  000600                     __psmallconst:
   151                           	opt stack 0
   152  000600  00                 	db	0
   153  000601                     STR_1:
   154  000601  20                 	db	32
   155  000602  4C                 	db	76	;'L'
   156  000603  43                 	db	67	;'C'
   157  000604  44                 	db	68	;'D'
   158  000605  20                 	db	32
   159  000606  31                 	db	49	;'1'
   160  000607  36                 	db	54	;'6'
   161  000608  78                 	db	120	;'x'
   162  000609  32                 	db	50	;'2'
   163  00060A  20                 	db	32
   164  00060B  26                 	db	38
   165  00060C  20                 	db	32
   166  00060D  58                 	db	88	;'X'
   167  00060E  43                 	db	67	;'C'
   168  00060F  38                 	db	56	;'8'
   169  000610  20                 	db	32
   170  000611  00                 	db	0
   171                           
   172                           ; #config settings
   173  000612  00                 	db	0	; dummy byte at the end
   174  0000                     
   175                           	psect	cinit
   176  000AF8                     __pcinit:
   177                           	opt stack 0
   178  000AF8                     start_initialization:
   179                           	opt stack 0
   180  000AF8                     __initialization:
   181                           	opt stack 0
   182                           
   183                           ; Initialize objects allocated to BANK0 (33 bytes)
   184                           ; load TBLPTR registers with __pidataBANK0
   185  000AF8  0EF0               	movlw	low __pidataBANK0
   186  000AFA  6EF6               	movwf	tblptrl,c
   187  000AFC  0E0B               	movlw	high __pidataBANK0
   188  000AFE  6EF7               	movwf	tblptrh,c
   189  000B00  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   190  000B02  6EF8               	movwf	tblptru,c
   191  000B04  EE00  F060         	lfsr	0,__pdataBANK0
   192  000B08  EE10 F021          	lfsr	1,33
   193  000B0C                     copy_data0:
   194  000B0C  0009               	tblrd		*+
   195  000B0E  CFF5 FFEE          	movff	tablat,postinc0
   196  000B12  50E5               	movf	postdec1,w,c
   197  000B14  50E1               	movf	fsr1l,w,c
   198  000B16  E1FA               	bnz	copy_data0
   199                           
   200                           ; Initialize objects allocated to COMRAM (22 bytes)
   201                           ; load TBLPTR registers with __pidataCOMRAM
   202  000B18  0E32               	movlw	low __pidataCOMRAM
   203  000B1A  6EF6               	movwf	tblptrl,c
   204  000B1C  0E0C               	movlw	high __pidataCOMRAM
   205  000B1E  6EF7               	movwf	tblptrh,c
   206  000B20  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   207  000B22  6EF8               	movwf	tblptru,c
   208  000B24  EE00  F026         	lfsr	0,__pdataCOMRAM
   209  000B28  EE10 F016          	lfsr	1,22
   210  000B2C                     copy_data1:
   211  000B2C  0009               	tblrd		*+
   212  000B2E  CFF5 FFEE          	movff	tablat,postinc0
   213  000B32  50E5               	movf	postdec1,w,c
   214  000B34  50E1               	movf	fsr1l,w,c
   215  000B36  E1FA               	bnz	copy_data1
   216                           
   217                           ; Clear objects allocated to COMRAM (7 bytes)
   218  000B38  EE00  F03C         	lfsr	0,__pbssCOMRAM
   219  000B3C  0E07               	movlw	7
   220  000B3E                     clear_0:
   221  000B3E  6AEE               	clrf	postinc0,c
   222  000B40  06E8               	decf	wreg,f,c
   223  000B42  E1FD               	bnz	clear_0
   224  000B44                     end_of_initialization:
   225                           	opt stack 0
   226  000B44                     __end_of__initialization:
   227                           	opt stack 0
   228  000B44  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   229  000B46  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   230  000B48  0E00               	movlw	low (__Lsmallconst shr (0+16))
   231  000B4A  6EF8               	movwf	tblptru,c
   232  000B4C  0E06               	movlw	high __Lsmallconst
   233  000B4E  6EF7               	movwf	tblptrh,c
   234  000B50  0100               	movlb	0
   235  000B52  EFB4  F003         	goto	_main	;jump to C main() function
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           postinc0	equ	0xFEE
   241                           wreg	equ	0xFE8
   242                           postdec1	equ	0xFE5
   243                           fsr1l	equ	0xFE1
   244                           
   245                           	psect	bssCOMRAM
   246  00003C                     __pbssCOMRAM:
   247                           	opt stack 0
   248  00003C                     _lcd:
   249                           	opt stack 0
   250  00003C                     	ds	5
   251  000041                     _RTCC_Count:
   252                           	opt stack 0
   253  000041                     	ds	2
   254                           tblptru	equ	0xFF8
   255                           tblptrh	equ	0xFF7
   256                           tblptrl	equ	0xFF6
   257                           tablat	equ	0xFF5
   258                           postinc0	equ	0xFEE
   259                           wreg	equ	0xFE8
   260                           postdec1	equ	0xFE5
   261                           fsr1l	equ	0xFE1
   262                           
   263                           	psect	dataCOMRAM
   264  000026                     __pdataCOMRAM:
   265                           	opt stack 0
   266  000026                     _text_1:
   267                           	opt stack 0
   268  000026                     	ds	17
   269  000037                     main@F6846:
   270                           	opt stack 0
   271  000037                     	ds	5
   272                           tblptru	equ	0xFF8
   273                           tblptrh	equ	0xFF7
   274                           tblptrl	equ	0xFF6
   275                           tablat	equ	0xFF5
   276                           postinc0	equ	0xFEE
   277                           wreg	equ	0xFE8
   278                           postdec1	equ	0xFE5
   279                           fsr1l	equ	0xFE1
   280                           
   281                           	psect	dataBANK0
   282  000060                     __pdataBANK0:
   283                           	opt stack 0
   284  000060                     _text_2:
   285                           	opt stack 0
   286  000060                     	ds	33
   287                           tblptru	equ	0xFF8
   288                           tblptrh	equ	0xFF7
   289                           tblptrl	equ	0xFF6
   290                           tablat	equ	0xFF5
   291                           postinc0	equ	0xFEE
   292                           wreg	equ	0xFE8
   293                           postdec1	equ	0xFE5
   294                           fsr1l	equ	0xFE1
   295                           
   296                           	psect	cstackCOMRAM
   297  000001                     __pcstackCOMRAM:
   298                           	opt stack 0
   299  000001                     ??_ISR:
   300  000001                     
   301                           ; 2 bytes @ 0x0
   302  000001                     	ds	14
   303  00000F                     ??_LCD_Out:
   304  00000F                     MCU_Delayms@time:
   305                           	opt stack 0
   306                           
   307                           ; 2 bytes @ 0xE
   308  00000F                     	ds	2
   309  000011                     ??_MCU_Delayms:
   310                           
   311                           ; 1 bytes @ 0x10
   312  000011                     	ds	1
   313  000012                     LCD_Out@c:
   314                           	opt stack 0
   315  000012                     MCU_Delayms@acc:
   316                           	opt stack 0
   317                           
   318                           ; 2 bytes @ 0x11
   319  000012                     	ds	1
   320  000013                     ??_LCD_Write:
   321  000013                     ??_LCD_putc:
   322                           
   323                           ; 1 bytes @ 0x12
   324  000013                     	ds	3
   325  000016                     LCD_Write@c:
   326                           	opt stack 0
   327  000016                     LCD_putc@c:
   328                           	opt stack 0
   329                           
   330                           ; 1 bytes @ 0x15
   331  000016                     	ds	1
   332  000017                     LCD_putrs@a:
   333                           	opt stack 0
   334  000017                     LCD_Init@display:
   335                           	opt stack 0
   336                           
   337                           ; 5 bytes @ 0x16
   338  000017                     	ds	2
   339  000019                     ??_LCD_putrs:
   340                           
   341                           ; 1 bytes @ 0x18
   342  000019                     	ds	2
   343  00001B                     LCD_putrs@i:
   344                           	opt stack 0
   345                           
   346                           ; 2 bytes @ 0x1A
   347  00001B                     	ds	1
   348  00001C                     ??_LCD_Init:
   349                           
   350                           ; 1 bytes @ 0x1B
   351  00001C                     	ds	1
   352  00001D                     LCD_Init@cmd:
   353                           	opt stack 0
   354                           
   355                           ; 1 bytes @ 0x1C
   356  00001D                     	ds	1
   357  00001E                     main@lcd:
   358                           	opt stack 0
   359                           
   360                           ; 5 bytes @ 0x1D
   361  00001E                     	ds	5
   362  000023                     main@c:
   363                           	opt stack 0
   364                           
   365                           ; 1 bytes @ 0x22
   366  000023                     	ds	1
   367  000024                     main@c_547:
   368                           	opt stack 0
   369                           
   370                           ; 1 bytes @ 0x23
   371  000024                     	ds	1
   372  000025                     main@c_548:
   373                           	opt stack 0
   374                           
   375                           ; 1 bytes @ 0x24
   376  000025                     	ds	1
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386 ;;
   387 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   388 ;;
   389 ;; *************** function _main *****************
   390 ;; Defined at:
   391 ;;		line 52 in file "main.c"
   392 ;; Parameters:    Size  Location     Type
   393 ;;		None
   394 ;; Auto vars:     Size  Location     Type
   395 ;;  c               1   36[COMRAM] unsigned char 
   396 ;;  c               1   35[COMRAM] unsigned char 
   397 ;;  c               1   34[COMRAM] unsigned char 
   398 ;;  lcd             5   29[COMRAM] struct .
   399 ;; Return value:  Size  Location     Type
   400 ;;                  2  126[None  ] int 
   401 ;; Registers used:
   402 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   403 ;; Tracked objects:
   404 ;;		On entry : 0/0
   405 ;;		On exit  : 0/0
   406 ;;		Unchanged: 0/0
   407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   408 ;;      Params:         0       0       0       0       0       0       0
   409 ;;      Locals:         8       0       0       0       0       0       0
   410 ;;      Temps:          0       0       0       0       0       0       0
   411 ;;      Totals:         8       0       0       0       0       0       0
   412 ;;Total ram usage:        8 bytes
   413 ;; Hardware stack levels required when called:    4
   414 ;; This function calls:
   415 ;;		_LCD_Init
   416 ;;		_LCD_Write
   417 ;;		_LCD_putc
   418 ;;		_LCD_putrs
   419 ;;		_MCU_Delayms
   420 ;;		_MCU_Init
   421 ;; This function is called by:
   422 ;;		Startup code after reset
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           	psect	text0
   427  000768                     __ptext0:
   428                           	opt stack 0
   429  000768                     _main:
   430                           	opt stack 27
   431                           
   432                           ;main.c: 53: MCU_Init();
   433                           
   434                           ;incstack = 0
   435  000768  EC09  F006         	call	_MCU_Init	;wreg free
   436                           
   437                           ;main.c: 55: LCD lcd = { &PORTB, 0, 1, 4, 5, 6, 7 };
   438  00076C  EE20  F037         	lfsr	2,main@F6846
   439  000770  EE10  F01E         	lfsr	1,main@lcd
   440  000774  0E04               	movlw	4
   441  000776                     u651:
   442  000776  CFDB FFE3          	movff	plusw2,plusw1
   443  00077A  06E8               	decf	wreg,f,c
   444  00077C  E2FC               	bc	u651
   445                           
   446                           ;main.c: 56: LCD_Init(lcd);
   447  00077E  EE20  F01E         	lfsr	2,main@lcd
   448  000782  EE00  F017         	lfsr	0,LCD_Init@display
   449  000786  0E04               	movlw	4
   450  000788                     u661:
   451  000788  CFDB FFEB          	movff	plusw2,plusw0
   452  00078C  06E8               	decf	wreg,f,c
   453  00078E  E2FC               	bc	u661
   454  000790  ECC8  F004         	call	_LCD_Init	;wreg free
   455                           
   456                           ;main.c: 57: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0 
      +                          );
   457  000794  0E00               	movlw	0
   458  000796  EC32  F005         	call	_LCD_Write
   459  00079A  0E01               	movlw	1
   460  00079C  EC32  F005         	call	_LCD_Write
   461  0007A0                     l1268:
   462  0007A0  0E00               	movlw	0
   463  0007A2  EC32  F005         	call	_LCD_Write
   464  0007A6  0E01               	movlw	1
   465  0007A8  EC32  F005         	call	_LCD_Write
   466                           
   467                           ;main.c: 60: do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Write( 0
      +                          x80 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0xF0)
      +                           >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { do { LCD_Wr
   468  0007AC  0E08               	movlw	8
   469  0007AE  EC32  F005         	call	_LCD_Write
   470  0007B2  0E00               	movlw	0
   471  0007B4  EC32  F005         	call	_LCD_Write
   472                           
   473                           ;main.c: 61: LCD_putrs(" LCD 16x2 & XC8 ");
   474  0007B8  0E01               	movlw	low STR_1
   475  0007BA  6E17               	movwf	LCD_putrs@a,c
   476  0007BC  0E06               	movlw	high STR_1
   477  0007BE  6E18               	movwf	LCD_putrs@a+1,c
   478  0007C0  ECAB  F005         	call	_LCD_putrs	;wreg free
   479                           
   480                           ;main.c: 62: do { if ( 1 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Write( 0
      +                          x80 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0xF0)
      +                           >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 1 == 2 ) { do { LCD_Wr
   481  0007C4  0E0C               	movlw	12
   482  0007C6  EC32  F005         	call	_LCD_Write
   483  0007CA  0E00               	movlw	0
   484  0007CC  EC32  F005         	call	_LCD_Write
   485                           
   486                           ;main.c: 63: for(char c = 0; c<15; ++c){
   487  0007D0  0E00               	movlw	0
   488  0007D2  6E23               	movwf	main@c,c
   489  0007D4                     l1294:
   490  0007D4  0E0E               	movlw	14
   491  0007D6  6423               	cpfsgt	main@c,c
   492  0007D8  D001               	goto	l1298
   493  0007DA  D013               	goto	l1306
   494  0007DC                     l1298:
   495                           
   496                           ;main.c: 64: LCD_putc(text_1[c]);
   497  0007DC  5023               	movf	main@c,w,c
   498  0007DE  0D01               	mullw	1
   499  0007E0  0E26               	movlw	low _text_1
   500  0007E2  24F3               	addwf	prodl,w,c
   501  0007E4  6ED9               	movwf	fsr2l,c
   502  0007E6  0E00               	movlw	high _text_1
   503  0007E8  20F4               	addwfc	prodh,w,c
   504  0007EA  6EDA               	movwf	fsr2h,c
   505  0007EC  50DF               	movf	indf2,w,c
   506  0007EE  EC52  F004         	call	_LCD_putc
   507                           
   508                           ;main.c: 65: MCU_Delayms(300);
   509  0007F2  0E01               	movlw	1
   510  0007F4  6E10               	movwf	MCU_Delayms@time+1,c
   511  0007F6  0E2C               	movlw	44
   512  0007F8  6E0F               	movwf	MCU_Delayms@time,c
   513  0007FA  ECD0  F005         	call	_MCU_Delayms	;wreg free
   514  0007FE  2A23               	incf	main@c,f,c
   515  000800  D7E9               	goto	l1294
   516  000802                     l1306:
   517                           
   518                           ;main.c: 66: }
   519                           ;main.c: 67: MCU_Delayms(1000);
   520  000802  0E03               	movlw	3
   521  000804  6E10               	movwf	MCU_Delayms@time+1,c
   522  000806  0EE8               	movlw	232
   523  000808  6E0F               	movwf	MCU_Delayms@time,c
   524  00080A  ECD0  F005         	call	_MCU_Delayms	;wreg free
   525                           
   526                           ;main.c: 68: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0 
      +                          );
   527  00080E  0E00               	movlw	0
   528  000810  EC32  F005         	call	_LCD_Write
   529  000814  0E01               	movlw	1
   530  000816  EC32  F005         	call	_LCD_Write
   531                           
   532                           ;main.c: 69: do { if ( 0 == 0 ) { do { LCD_Write( (0x80 + 0 & 0xF0) >> 4 ); LCD_Write( 0
      +                          x80 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 1 ) { do { LCD_Write( (0xC0 + 0 & 0xF0)
      +                           >> 4 ); LCD_Write( 0xC0 + 0 & 0x0F); } while ( 0 ); } else if ( 0 == 2 ) { do { LCD_Wr
   533  00081A  0E08               	movlw	8
   534  00081C  EC32  F005         	call	_LCD_Write
   535  000820  0E00               	movlw	0
   536  000822  EC32  F005         	call	_LCD_Write
   537                           
   538                           ;main.c: 70: for(char c = 0; c<16; ++c){
   539  000826  0E00               	movlw	0
   540  000828  6E24               	movwf	main@c_547,c
   541  00082A                     l1324:
   542  00082A  0E0F               	movlw	15
   543  00082C  6424               	cpfsgt	main@c_547,c
   544  00082E  D001               	goto	l1328
   545  000830  D013               	goto	l1338
   546  000832                     l1328:
   547                           
   548                           ;main.c: 71: LCD_putc(text_2[c]);
   549  000832  5024               	movf	main@c_547,w,c
   550  000834  0D01               	mullw	1
   551  000836  0E60               	movlw	low _text_2
   552  000838  24F3               	addwf	prodl,w,c
   553  00083A  6ED9               	movwf	fsr2l,c
   554  00083C  0E00               	movlw	high _text_2
   555  00083E  20F4               	addwfc	prodh,w,c
   556  000840  6EDA               	movwf	fsr2h,c
   557  000842  50DF               	movf	indf2,w,c
   558  000844  EC52  F004         	call	_LCD_putc
   559                           
   560                           ;main.c: 72: MCU_Delayms(300);
   561  000848  0E01               	movlw	1
   562  00084A  6E10               	movwf	MCU_Delayms@time+1,c
   563  00084C  0E2C               	movlw	44
   564  00084E  6E0F               	movwf	MCU_Delayms@time,c
   565  000850  ECD0  F005         	call	_MCU_Delayms	;wreg free
   566  000854  2A24               	incf	main@c_547,f,c
   567  000856  D7E9               	goto	l1324
   568  000858                     l1338:
   569  000858  0E0C               	movlw	12
   570  00085A  EC32  F005         	call	_LCD_Write
   571  00085E  0E00               	movlw	0
   572  000860  EC32  F005         	call	_LCD_Write
   573                           
   574                           ;main.c: 75: for(char c = 16; c<32; ++c){
   575  000864  0E10               	movlw	16
   576  000866  6E25               	movwf	main@c_548,c
   577  000868                     l1346:
   578  000868  0E1F               	movlw	31
   579  00086A  6425               	cpfsgt	main@c_548,c
   580  00086C  D001               	goto	l1350
   581  00086E  D013               	goto	l1358
   582  000870                     l1350:
   583                           
   584                           ;main.c: 76: LCD_putc(text_2[c]);
   585  000870  5025               	movf	main@c_548,w,c
   586  000872  0D01               	mullw	1
   587  000874  0E60               	movlw	low _text_2
   588  000876  24F3               	addwf	prodl,w,c
   589  000878  6ED9               	movwf	fsr2l,c
   590  00087A  0E00               	movlw	high _text_2
   591  00087C  20F4               	addwfc	prodh,w,c
   592  00087E  6EDA               	movwf	fsr2h,c
   593  000880  50DF               	movf	indf2,w,c
   594  000882  EC52  F004         	call	_LCD_putc
   595                           
   596                           ;main.c: 77: MCU_Delayms(300);
   597  000886  0E01               	movlw	1
   598  000888  6E10               	movwf	MCU_Delayms@time+1,c
   599  00088A  0E2C               	movlw	44
   600  00088C  6E0F               	movwf	MCU_Delayms@time,c
   601  00088E  ECD0  F005         	call	_MCU_Delayms	;wreg free
   602  000892  2A25               	incf	main@c_548,f,c
   603  000894  D7E9               	goto	l1346
   604  000896                     l1358:
   605                           
   606                           ;main.c: 78: }
   607                           ;main.c: 79: MCU_Delayms(1000);
   608  000896  0E03               	movlw	3
   609  000898  6E10               	movwf	MCU_Delayms@time+1,c
   610  00089A  0EE8               	movlw	232
   611  00089C  6E0F               	movwf	MCU_Delayms@time,c
   612  00089E  ECD0  F005         	call	_MCU_Delayms	;wreg free
   613  0008A2  D77E               	goto	l1268
   614  0008A4                     __end_of_main:
   615                           	opt stack 0
   616                           tblptru	equ	0xFF8
   617                           tblptrh	equ	0xFF7
   618                           tblptrl	equ	0xFF6
   619                           tablat	equ	0xFF5
   620                           prodh	equ	0xFF4
   621                           prodl	equ	0xFF3
   622                           postinc0	equ	0xFEE
   623                           plusw0	equ	0xFEB
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           plusw1	equ	0xFE3
   627                           fsr1l	equ	0xFE1
   628                           indf2	equ	0xFDF
   629                           plusw2	equ	0xFDB
   630                           fsr2h	equ	0xFDA
   631                           fsr2l	equ	0xFD9
   632                           
   633 ;; *************** function _MCU_Init *****************
   634 ;; Defined at:
   635 ;;		line 83 in file "main.c"
   636 ;; Parameters:    Size  Location     Type
   637 ;;		None
   638 ;; Auto vars:     Size  Location     Type
   639 ;;		None
   640 ;; Return value:  Size  Location     Type
   641 ;;                  1    wreg      void 
   642 ;; Registers used:
   643 ;;		wreg, status,2, cstack
   644 ;; Tracked objects:
   645 ;;		On entry : 0/0
   646 ;;		On exit  : 0/0
   647 ;;		Unchanged: 0/0
   648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   649 ;;      Params:         0       0       0       0       0       0       0
   650 ;;      Locals:         0       0       0       0       0       0       0
   651 ;;      Temps:          0       0       0       0       0       0       0
   652 ;;      Totals:         0       0       0       0       0       0       0
   653 ;;Total ram usage:        0 bytes
   654 ;; Hardware stack levels used:    1
   655 ;; Hardware stack levels required when called:    2
   656 ;; This function calls:
   657 ;;		_RTCC_Init
   658 ;; This function is called by:
   659 ;;		_main
   660 ;; This function uses a non-reentrant model
   661 ;;
   662                           
   663                           	psect	text1
   664  000C12                     __ptext1:
   665                           	opt stack 0
   666  000C12                     _MCU_Init:
   667                           	opt stack 28
   668                           
   669                           ;main.c: 84: ANSELA = 0;
   670                           
   671                           ;incstack = 0
   672  000C12  0E00               	movlw	0
   673  000C14  010F               	movlb	15	; () banked
   674  000C16  6F38               	movwf	56,b	;volatile
   675                           
   676                           ;main.c: 85: ANSELB = 0;
   677  000C18  0E00               	movlw	0
   678  000C1A  010F               	movlb	15	; () banked
   679  000C1C  6F39               	movwf	57,b	;volatile
   680                           
   681                           ;main.c: 86: ANSELC = 0;
   682  000C1E  0E00               	movlw	0
   683  000C20  010F               	movlb	15	; () banked
   684  000C22  6F3A               	movwf	58,b	;volatile
   685                           
   686                           ; BSR set to: 15
   687                           ;main.c: 88: OSCCONbits.IRCF=0b111;
   688  000C24  88D3               	bsf	4051,4,c	;volatile
   689  000C26  8AD3               	bsf	4051,5,c	;volatile
   690  000C28  8CD3               	bsf	4051,6,c	;volatile
   691                           
   692                           ; BSR set to: 15
   693                           ;main.c: 89: TRISCbits.RC6 = 0;
   694  000C2A  9C94               	bcf	3988,6,c	;volatile
   695                           
   696                           ; BSR set to: 15
   697                           ;main.c: 90: RTCC_Init();
   698  000C2C  ECE6  F005         	call	_RTCC_Init	;wreg free
   699  000C30  0012               	return		;funcret
   700  000C32                     __end_of_MCU_Init:
   701                           	opt stack 0
   702                           tblptru	equ	0xFF8
   703                           tblptrh	equ	0xFF7
   704                           tblptrl	equ	0xFF6
   705                           tablat	equ	0xFF5
   706                           prodh	equ	0xFF4
   707                           prodl	equ	0xFF3
   708                           postinc0	equ	0xFEE
   709                           plusw0	equ	0xFEB
   710                           wreg	equ	0xFE8
   711                           postdec1	equ	0xFE5
   712                           plusw1	equ	0xFE3
   713                           fsr1l	equ	0xFE1
   714                           indf2	equ	0xFDF
   715                           plusw2	equ	0xFDB
   716                           fsr2h	equ	0xFDA
   717                           fsr2l	equ	0xFD9
   718                           
   719 ;; *************** function _RTCC_Init *****************
   720 ;; Defined at:
   721 ;;		line 100 in file "main.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;		None
   724 ;; Auto vars:     Size  Location     Type
   725 ;;		None
   726 ;; Return value:  Size  Location     Type
   727 ;;                  1    wreg      void 
   728 ;; Registers used:
   729 ;;		wreg, status,2
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   735 ;;      Params:         0       0       0       0       0       0       0
   736 ;;      Locals:         0       0       0       0       0       0       0
   737 ;;      Temps:          0       0       0       0       0       0       0
   738 ;;      Totals:         0       0       0       0       0       0       0
   739 ;;Total ram usage:        0 bytes
   740 ;; Hardware stack levels used:    1
   741 ;; Hardware stack levels required when called:    1
   742 ;; This function calls:
   743 ;;		Nothing
   744 ;; This function is called by:
   745 ;;		_MCU_Init
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text2
   750  000BCC                     __ptext2:
   751                           	opt stack 0
   752  000BCC                     _RTCC_Init:
   753                           	opt stack 28
   754                           
   755                           ;main.c: 102: T0CONbits.TMR0ON = 1;
   756                           
   757                           ;incstack = 0
   758  000BCC  8ED5               	bsf	4053,7,c	;volatile
   759                           
   760                           ;main.c: 103: T0CONbits.T08BIT = 0;
   761  000BCE  9CD5               	bcf	4053,6,c	;volatile
   762                           
   763                           ;main.c: 104: T0CONbits.T0CS = 0;
   764  000BD0  9AD5               	bcf	4053,5,c	;volatile
   765                           
   766                           ;main.c: 105: T0CONbits.T0SE = 0;
   767  000BD2  98D5               	bcf	4053,4,c	;volatile
   768                           
   769                           ;main.c: 106: T0CONbits.PSA = 0;
   770  000BD4  96D5               	bcf	4053,3,c	;volatile
   771                           
   772                           ;main.c: 107: T0CONbits.T0PS = 0b000;
   773  000BD6  90D5               	bcf	4053,0,c	;volatile
   774  000BD8  92D5               	bcf	4053,1,c	;volatile
   775  000BDA  94D5               	bcf	4053,2,c	;volatile
   776                           
   777                           ;main.c: 108: TMR0H = 0xF8;
   778  000BDC  0EF8               	movlw	248
   779  000BDE  6ED7               	movwf	4055,c	;volatile
   780                           
   781                           ;main.c: 109: TMR0L = 0x30;
   782  000BE0  0E30               	movlw	48
   783  000BE2  6ED6               	movwf	4054,c	;volatile
   784                           
   785                           ;main.c: 110: INTCONbits.TMR0IF = 0;
   786  000BE4  94F2               	bcf	intcon,2,c	;volatile
   787                           
   788                           ;main.c: 111: INTCONbits.TMR0IE = 1;
   789  000BE6  8AF2               	bsf	intcon,5,c	;volatile
   790                           
   791                           ;main.c: 112: INTCON2bits.TMR0IP = 1;
   792  000BE8  84F1               	bsf	intcon2,2,c	;volatile
   793                           
   794                           ;main.c: 113: RCONbits.IPEN = 1;
   795  000BEA  8ED0               	bsf	4048,7,c	;volatile
   796                           
   797                           ;main.c: 114: INTCONbits.GIEH = 1;
   798  000BEC  8EF2               	bsf	intcon,7,c	;volatile
   799  000BEE  0012               	return		;funcret
   800  000BF0                     __end_of_RTCC_Init:
   801                           	opt stack 0
   802                           tblptru	equ	0xFF8
   803                           tblptrh	equ	0xFF7
   804                           tblptrl	equ	0xFF6
   805                           tablat	equ	0xFF5
   806                           prodh	equ	0xFF4
   807                           prodl	equ	0xFF3
   808                           intcon	equ	0xFF2
   809                           intcon2	equ	0xFF1
   810                           postinc0	equ	0xFEE
   811                           plusw0	equ	0xFEB
   812                           wreg	equ	0xFE8
   813                           postdec1	equ	0xFE5
   814                           plusw1	equ	0xFE3
   815                           fsr1l	equ	0xFE1
   816                           indf2	equ	0xFDF
   817                           plusw2	equ	0xFDB
   818                           fsr2h	equ	0xFDA
   819                           fsr2l	equ	0xFD9
   820                           
   821 ;; *************** function _MCU_Delayms *****************
   822 ;; Defined at:
   823 ;;		line 93 in file "main.c"
   824 ;; Parameters:    Size  Location     Type
   825 ;;  time            2   14[COMRAM] unsigned int 
   826 ;; Auto vars:     Size  Location     Type
   827 ;;  acc             2   17[COMRAM] unsigned int 
   828 ;; Return value:  Size  Location     Type
   829 ;;                  1    wreg      void 
   830 ;; Registers used:
   831 ;;		wreg, status,2, status,0
   832 ;; Tracked objects:
   833 ;;		On entry : 0/0
   834 ;;		On exit  : 0/0
   835 ;;		Unchanged: 0/0
   836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   837 ;;      Params:         2       0       0       0       0       0       0
   838 ;;      Locals:         2       0       0       0       0       0       0
   839 ;;      Temps:          1       0       0       0       0       0       0
   840 ;;      Totals:         5       0       0       0       0       0       0
   841 ;;Total ram usage:        5 bytes
   842 ;; Hardware stack levels used:    1
   843 ;; Hardware stack levels required when called:    1
   844 ;; This function calls:
   845 ;;		Nothing
   846 ;; This function is called by:
   847 ;;		_main
   848 ;; This function uses a non-reentrant model
   849 ;;
   850                           
   851                           	psect	text3
   852  000BA0                     __ptext3:
   853                           	opt stack 0
   854  000BA0                     _MCU_Delayms:
   855                           	opt stack 29
   856                           
   857                           ;main.c: 94: unsigned int acc;
   858                           ;main.c: 95: for(acc=0; acc<time; acc++){
   859                           
   860                           ;incstack = 0
   861  000BA0  0E00               	movlw	0
   862  000BA2  6E13               	movwf	MCU_Delayms@acc+1,c
   863  000BA4  0E00               	movlw	0
   864  000BA6  6E12               	movwf	MCU_Delayms@acc,c
   865  000BA8  D00A               	goto	l218
   866  000BAA                     l1246:
   867                           
   868                           ;main.c: 96: _delay((unsigned long)((1)*(16000000/4000.0)));
   869  000BAA  0E06               	movlw	6
   870  000BAC  6E11               	movwf	??_MCU_Delayms& (0+255),c
   871  000BAE  0E30               	movlw	48
   872  000BB0                     u737:
   873  000BB0  2EE8               	decfsz	wreg,f,c
   874  000BB2  D7FE               	bra	u737
   875  000BB4  2E11               	decfsz	??_MCU_Delayms& (0+255),f,c
   876  000BB6  D7FC               	bra	u737
   877  000BB8  D000               	nop2	
   878  000BBA  4A12               	infsnz	MCU_Delayms@acc,f,c
   879  000BBC  2A13               	incf	MCU_Delayms@acc+1,f,c
   880  000BBE                     l218:
   881  000BBE  500F               	movf	MCU_Delayms@time,w,c
   882  000BC0  5C12               	subwf	MCU_Delayms@acc,w,c
   883  000BC2  5010               	movf	MCU_Delayms@time+1,w,c
   884  000BC4  5813               	subwfb	MCU_Delayms@acc+1,w,c
   885  000BC6  B0D8               	btfsc	status,0,c
   886  000BC8  0012               	return	
   887  000BCA  D7EF               	goto	l1246
   888  000BCC                     __end_of_MCU_Delayms:
   889                           	opt stack 0
   890                           tblptru	equ	0xFF8
   891                           tblptrh	equ	0xFF7
   892                           tblptrl	equ	0xFF6
   893                           tablat	equ	0xFF5
   894                           prodh	equ	0xFF4
   895                           prodl	equ	0xFF3
   896                           intcon	equ	0xFF2
   897                           intcon2	equ	0xFF1
   898                           postinc0	equ	0xFEE
   899                           plusw0	equ	0xFEB
   900                           wreg	equ	0xFE8
   901                           postdec1	equ	0xFE5
   902                           plusw1	equ	0xFE3
   903                           fsr1l	equ	0xFE1
   904                           indf2	equ	0xFDF
   905                           plusw2	equ	0xFDB
   906                           fsr2h	equ	0xFDA
   907                           fsr2l	equ	0xFD9
   908                           status	equ	0xFD8
   909                           
   910 ;; *************** function _LCD_putrs *****************
   911 ;; Defined at:
   912 ;;		line 143 in file "lcd.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  a               2   22[COMRAM] PTR const unsigned char 
   915 ;;		 -> STR_1(17), 
   916 ;; Auto vars:     Size  Location     Type
   917 ;;  i               2   26[COMRAM] int 
   918 ;; Return value:  Size  Location     Type
   919 ;;                  1    wreg      void 
   920 ;; Registers used:
   921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   922 ;; Tracked objects:
   923 ;;		On entry : 0/0
   924 ;;		On exit  : 0/0
   925 ;;		Unchanged: 0/0
   926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   927 ;;      Params:         2       0       0       0       0       0       0
   928 ;;      Locals:         2       0       0       0       0       0       0
   929 ;;      Temps:          2       0       0       0       0       0       0
   930 ;;      Totals:         6       0       0       0       0       0       0
   931 ;;Total ram usage:        6 bytes
   932 ;; Hardware stack levels used:    1
   933 ;; Hardware stack levels required when called:    3
   934 ;; This function calls:
   935 ;;		_LCD_putc
   936 ;; This function is called by:
   937 ;;		_main
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text4
   942  000B56                     __ptext4:
   943                           	opt stack 0
   944  000B56                     _LCD_putrs:
   945                           	opt stack 27
   946                           
   947                           ;lcd.c: 145: for ( int i = 0; a[i] != '\0'; ++i ) {
   948                           
   949                           ;incstack = 0
   950  000B56  0E00               	movlw	0
   951  000B58  6E1C               	movwf	LCD_putrs@i+1,c
   952  000B5A  0E00               	movlw	0
   953  000B5C  6E1B               	movwf	LCD_putrs@i,c
   954  000B5E  D010               	goto	l1234
   955  000B60                     l1230:
   956                           
   957                           ;lcd.c: 146: LCD_putc(a[i]);
   958  000B60  501B               	movf	LCD_putrs@i,w,c
   959  000B62  2417               	addwf	LCD_putrs@a,w,c
   960  000B64  6E19               	movwf	??_LCD_putrs& (0+255),c
   961  000B66  501C               	movf	LCD_putrs@i+1,w,c
   962  000B68  2018               	addwfc	LCD_putrs@a+1,w,c
   963  000B6A  6E1A               	movwf	(??_LCD_putrs+1)& (0+255),c
   964  000B6C  C019  FFF6         	movff	??_LCD_putrs,tblptrl
   965  000B70  C01A  FFF7         	movff	??_LCD_putrs+1,tblptrh
   966  000B74                     	if	0	;tblptru may be non-zero
   967  000B74                     	endif
   968  000B74                     	if	0	;tblptru may be non-zero
   969  000B74                     	endif
   970  000B74  0008               	tblrd		*
   971  000B76  50F5               	movf	tablat,w,c
   972  000B78  EC52  F004         	call	_LCD_putc
   973  000B7C  4A1B               	infsnz	LCD_putrs@i,f,c
   974  000B7E  2A1C               	incf	LCD_putrs@i+1,f,c
   975  000B80                     l1234:
   976  000B80  501B               	movf	LCD_putrs@i,w,c
   977  000B82  2417               	addwf	LCD_putrs@a,w,c
   978  000B84  6E19               	movwf	??_LCD_putrs& (0+255),c
   979  000B86  501C               	movf	LCD_putrs@i+1,w,c
   980  000B88  2018               	addwfc	LCD_putrs@a+1,w,c
   981  000B8A  6E1A               	movwf	(??_LCD_putrs+1)& (0+255),c
   982  000B8C  C019  FFF6         	movff	??_LCD_putrs,tblptrl
   983  000B90  C01A  FFF7         	movff	??_LCD_putrs+1,tblptrh
   984  000B94                     	if	0	;tblptru may be non-zero
   985  000B94                     	endif
   986  000B94                     	if	0	;tblptru may be non-zero
   987  000B94                     	endif
   988  000B94  0008               	tblrd		*
   989  000B96  50F5               	movf	tablat,w,c
   990  000B98  0900               	iorlw	0
   991  000B9A  B4D8               	btfsc	status,2,c
   992  000B9C  0012               	return	
   993  000B9E  D7E0               	goto	l1230
   994  000BA0                     __end_of_LCD_putrs:
   995                           	opt stack 0
   996                           tblptru	equ	0xFF8
   997                           tblptrh	equ	0xFF7
   998                           tblptrl	equ	0xFF6
   999                           tablat	equ	0xFF5
  1000                           prodh	equ	0xFF4
  1001                           prodl	equ	0xFF3
  1002                           intcon	equ	0xFF2
  1003                           intcon2	equ	0xFF1
  1004                           postinc0	equ	0xFEE
  1005                           plusw0	equ	0xFEB
  1006                           wreg	equ	0xFE8
  1007                           postdec1	equ	0xFE5
  1008                           plusw1	equ	0xFE3
  1009                           fsr1l	equ	0xFE1
  1010                           indf2	equ	0xFDF
  1011                           plusw2	equ	0xFDB
  1012                           fsr2h	equ	0xFDA
  1013                           fsr2l	equ	0xFD9
  1014                           status	equ	0xFD8
  1015                           
  1016 ;; *************** function _LCD_putc *****************
  1017 ;; Defined at:
  1018 ;;		line 118 in file "lcd.c"
  1019 ;; Parameters:    Size  Location     Type
  1020 ;;  c               1    wreg     unsigned char 
  1021 ;; Auto vars:     Size  Location     Type
  1022 ;;  c               1   21[COMRAM] unsigned char 
  1023 ;; Return value:  Size  Location     Type
  1024 ;;                  1    wreg      void 
  1025 ;; Registers used:
  1026 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1027 ;; Tracked objects:
  1028 ;;		On entry : 0/0
  1029 ;;		On exit  : 0/0
  1030 ;;		Unchanged: 0/0
  1031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1032 ;;      Params:         0       0       0       0       0       0       0
  1033 ;;      Locals:         1       0       0       0       0       0       0
  1034 ;;      Temps:          3       0       0       0       0       0       0
  1035 ;;      Totals:         4       0       0       0       0       0       0
  1036 ;;Total ram usage:        4 bytes
  1037 ;; Hardware stack levels used:    1
  1038 ;; Hardware stack levels required when called:    2
  1039 ;; This function calls:
  1040 ;;		_LCD_Out
  1041 ;; This function is called by:
  1042 ;;		_LCD_putrs
  1043 ;;		_main
  1044 ;;		_LCD_puts
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           	psect	text5
  1049  0008A4                     __ptext5:
  1050                           	opt stack 0
  1051  0008A4                     _LCD_putc:
  1052                           	opt stack 27
  1053                           
  1054                           ;incstack = 0
  1055                           ;LCD_putc@c stored from wreg
  1056  0008A4  6E16               	movwf	LCD_putc@c,c
  1057                           
  1058                           ;lcd.c: 120: *(lcd.PORT) |= 1 << lcd.RS;
  1059  0008A6  503E               	movf	_lcd+2,w,c
  1060  0008A8  0B07               	andlw	7
  1061  0008AA  6E13               	movwf	??_LCD_putc& (0+255),c
  1062  0008AC  0E01               	movlw	1
  1063  0008AE  6E14               	movwf	(??_LCD_putc+1)& (0+255),c
  1064  0008B0  2A13               	incf	??_LCD_putc,f,c
  1065  0008B2  D002               	goto	u534
  1066  0008B4                     u535:
  1067  0008B4  90D8               	bcf	status,0,c
  1068  0008B6  3614               	rlcf	??_LCD_putc+1,f,c
  1069  0008B8                     u534:
  1070  0008B8  2E13               	decfsz	??_LCD_putc,f,c
  1071  0008BA  D7FC               	goto	u535
  1072  0008BC  C03C  FFD9         	movff	_lcd,fsr2l
  1073  0008C0  C03D  FFDA         	movff	_lcd+1,fsr2h
  1074  0008C4  5014               	movf	??_LCD_putc+1,w,c
  1075  0008C6  12DF               	iorwf	indf2,f,c
  1076                           
  1077                           ;lcd.c: 121: LCD_Out((c & 0xF0) >> 4);
  1078  0008C8  3816               	swapf	LCD_putc@c,w,c
  1079  0008CA  0B0F               	andlw	15
  1080  0008CC  0B0F               	andlw	15
  1081  0008CE  EC0A  F003         	call	_LCD_Out
  1082                           
  1083                           ;lcd.c: 123: *(lcd.PORT) |= 1 << lcd.EN;
  1084  0008D2  303E               	rrcf	_lcd+2,w,c
  1085  0008D4  32E8               	rrcf	wreg,f,c
  1086  0008D6  32E8               	rrcf	wreg,f,c
  1087  0008D8  0B07               	andlw	7
  1088  0008DA  6E13               	movwf	??_LCD_putc& (0+255),c
  1089  0008DC  0E01               	movlw	1
  1090  0008DE  6E14               	movwf	(??_LCD_putc+1)& (0+255),c
  1091  0008E0  2A13               	incf	??_LCD_putc,f,c
  1092  0008E2  D002               	goto	u544
  1093  0008E4                     u545:
  1094  0008E4  90D8               	bcf	status,0,c
  1095  0008E6  3614               	rlcf	??_LCD_putc+1,f,c
  1096  0008E8                     u544:
  1097  0008E8  2E13               	decfsz	??_LCD_putc,f,c
  1098  0008EA  D7FC               	goto	u545
  1099  0008EC  C03C  FFD9         	movff	_lcd,fsr2l
  1100  0008F0  C03D  FFDA         	movff	_lcd+1,fsr2h
  1101  0008F4  5014               	movf	??_LCD_putc+1,w,c
  1102  0008F6  12DF               	iorwf	indf2,f,c
  1103                           
  1104                           ;lcd.c: 124: _delay((unsigned long)((40)*(16000000/4000000.0)));
  1105  0008F8  0E35               	movlw	53
  1106  0008FA                     u747:
  1107  0008FA  2EE8               	decfsz	wreg,f,c
  1108  0008FC  D7FE               	bra	u747
  1109  0008FE  F000               	nop	
  1110                           
  1111                           ;lcd.c: 125: *(lcd.PORT) &= ~(1 << lcd.EN);
  1112  000900  303E               	rrcf	_lcd+2,w,c
  1113  000902  32E8               	rrcf	wreg,f,c
  1114  000904  32E8               	rrcf	wreg,f,c
  1115  000906  0B07               	andlw	7
  1116  000908  6E13               	movwf	??_LCD_putc& (0+255),c
  1117  00090A  0E01               	movlw	1
  1118  00090C  6E14               	movwf	(??_LCD_putc+1)& (0+255),c
  1119  00090E  2A13               	incf	??_LCD_putc,f,c
  1120  000910  D002               	goto	u554
  1121  000912                     u555:
  1122  000912  90D8               	bcf	status,0,c
  1123  000914  3614               	rlcf	??_LCD_putc+1,f,c
  1124  000916                     u554:
  1125  000916  2E13               	decfsz	??_LCD_putc,f,c
  1126  000918  D7FC               	goto	u555
  1127  00091A  5014               	movf	??_LCD_putc+1,w,c
  1128  00091C  0AFF               	xorlw	255
  1129  00091E  6E15               	movwf	(??_LCD_putc+2)& (0+255),c
  1130  000920  C03C  FFD9         	movff	_lcd,fsr2l
  1131  000924  C03D  FFDA         	movff	_lcd+1,fsr2h
  1132  000928  5015               	movf	??_LCD_putc+2,w,c
  1133  00092A  16DF               	andwf	indf2,f,c
  1134                           
  1135                           ;lcd.c: 127: LCD_Out(c & 0x0F);
  1136  00092C  5016               	movf	LCD_putc@c,w,c
  1137  00092E  0B0F               	andlw	15
  1138  000930  EC0A  F003         	call	_LCD_Out
  1139                           
  1140                           ;lcd.c: 129: *(lcd.PORT) |= 1 << lcd.EN;
  1141  000934  303E               	rrcf	_lcd+2,w,c
  1142  000936  32E8               	rrcf	wreg,f,c
  1143  000938  32E8               	rrcf	wreg,f,c
  1144  00093A  0B07               	andlw	7
  1145  00093C  6E13               	movwf	??_LCD_putc& (0+255),c
  1146  00093E  0E01               	movlw	1
  1147  000940  6E14               	movwf	(??_LCD_putc+1)& (0+255),c
  1148  000942  2A13               	incf	??_LCD_putc,f,c
  1149  000944  D002               	goto	u564
  1150  000946                     u565:
  1151  000946  90D8               	bcf	status,0,c
  1152  000948  3614               	rlcf	??_LCD_putc+1,f,c
  1153  00094A                     u564:
  1154  00094A  2E13               	decfsz	??_LCD_putc,f,c
  1155  00094C  D7FC               	goto	u565
  1156  00094E  C03C  FFD9         	movff	_lcd,fsr2l
  1157  000952  C03D  FFDA         	movff	_lcd+1,fsr2h
  1158  000956  5014               	movf	??_LCD_putc+1,w,c
  1159  000958  12DF               	iorwf	indf2,f,c
  1160                           
  1161                           ;lcd.c: 130: _delay((unsigned long)((40)*(16000000/4000000.0)));
  1162  00095A  0E35               	movlw	53
  1163  00095C                     u757:
  1164  00095C  2EE8               	decfsz	wreg,f,c
  1165  00095E  D7FE               	bra	u757
  1166  000960  F000               	nop	
  1167                           
  1168                           ;lcd.c: 131: *(lcd.PORT) &= ~(1 << lcd.EN);
  1169  000962  303E               	rrcf	_lcd+2,w,c
  1170  000964  32E8               	rrcf	wreg,f,c
  1171  000966  32E8               	rrcf	wreg,f,c
  1172  000968  0B07               	andlw	7
  1173  00096A  6E13               	movwf	??_LCD_putc& (0+255),c
  1174  00096C  0E01               	movlw	1
  1175  00096E  6E14               	movwf	(??_LCD_putc+1)& (0+255),c
  1176  000970  2A13               	incf	??_LCD_putc,f,c
  1177  000972  D002               	goto	u574
  1178  000974                     u575:
  1179  000974  90D8               	bcf	status,0,c
  1180  000976  3614               	rlcf	??_LCD_putc+1,f,c
  1181  000978                     u574:
  1182  000978  2E13               	decfsz	??_LCD_putc,f,c
  1183  00097A  D7FC               	goto	u575
  1184  00097C  5014               	movf	??_LCD_putc+1,w,c
  1185  00097E  0AFF               	xorlw	255
  1186  000980  6E15               	movwf	(??_LCD_putc+2)& (0+255),c
  1187  000982  C03C  FFD9         	movff	_lcd,fsr2l
  1188  000986  C03D  FFDA         	movff	_lcd+1,fsr2h
  1189  00098A  5015               	movf	??_LCD_putc+2,w,c
  1190  00098C  16DF               	andwf	indf2,f,c
  1191  00098E  0012               	return		;funcret
  1192  000990                     __end_of_LCD_putc:
  1193                           	opt stack 0
  1194                           tblptru	equ	0xFF8
  1195                           tblptrh	equ	0xFF7
  1196                           tblptrl	equ	0xFF6
  1197                           tablat	equ	0xFF5
  1198                           prodh	equ	0xFF4
  1199                           prodl	equ	0xFF3
  1200                           intcon	equ	0xFF2
  1201                           intcon2	equ	0xFF1
  1202                           postinc0	equ	0xFEE
  1203                           plusw0	equ	0xFEB
  1204                           wreg	equ	0xFE8
  1205                           postdec1	equ	0xFE5
  1206                           plusw1	equ	0xFE3
  1207                           fsr1l	equ	0xFE1
  1208                           indf2	equ	0xFDF
  1209                           plusw2	equ	0xFDB
  1210                           fsr2h	equ	0xFDA
  1211                           fsr2l	equ	0xFD9
  1212                           status	equ	0xFD8
  1213                           
  1214 ;; *************** function _LCD_Init *****************
  1215 ;; Defined at:
  1216 ;;		line 60 in file "lcd.c"
  1217 ;; Parameters:    Size  Location     Type
  1218 ;;  display         5   22[COMRAM] struct .
  1219 ;; Auto vars:     Size  Location     Type
  1220 ;;  cmd             1   28[COMRAM] unsigned char 
  1221 ;; Return value:  Size  Location     Type
  1222 ;;                  1    wreg      unsigned char 
  1223 ;; Registers used:
  1224 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1225 ;; Tracked objects:
  1226 ;;		On entry : 0/0
  1227 ;;		On exit  : 0/0
  1228 ;;		Unchanged: 0/0
  1229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1230 ;;      Params:         5       0       0       0       0       0       0
  1231 ;;      Locals:         1       0       0       0       0       0       0
  1232 ;;      Temps:          1       0       0       0       0       0       0
  1233 ;;      Totals:         7       0       0       0       0       0       0
  1234 ;;Total ram usage:        7 bytes
  1235 ;; Hardware stack levels used:    1
  1236 ;; Hardware stack levels required when called:    3
  1237 ;; This function calls:
  1238 ;;		_LCD_Write
  1239 ;; This function is called by:
  1240 ;;		_main
  1241 ;; This function uses a non-reentrant model
  1242 ;;
  1243                           
  1244                           	psect	text6
  1245  000990                     __ptext6:
  1246                           	opt stack 0
  1247  000990                     _LCD_Init:
  1248                           	opt stack 27
  1249                           
  1250                           ;lcd.c: 62: lcd = display;
  1251                           
  1252                           ;incstack = 0
  1253  000990  EE20  F017         	lfsr	2,LCD_Init@display
  1254  000994  EE10  F03C         	lfsr	1,_lcd
  1255  000998  0E04               	movlw	4
  1256  00099A                     u581:
  1257  00099A  CFDB FFE3          	movff	plusw2,plusw1
  1258  00099E  06E8               	decf	wreg,f,c
  1259  0009A0  E2FC               	bc	u581
  1260                           
  1261                           ;lcd.c: 71: if ( lcd.PORT == &PORTA ) {
  1262  0009A2  0E80               	movlw	128
  1263  0009A4  183C               	xorwf	_lcd,w,c
  1264  0009A6  E107               	bnz	l1182
  1265  0009A8  0E0F               	movlw	15
  1266  0009AA  183D               	xorwf	_lcd+1,w,c
  1267  0009AC  A4D8               	btfss	status,2,c
  1268  0009AE  D003               	goto	l1182
  1269                           
  1270                           ;lcd.c: 72: TRISA = 0x00;
  1271  0009B0  0E00               	movlw	0
  1272  0009B2  6E92               	movwf	3986,c	;volatile
  1273                           
  1274                           ;lcd.c: 73: }
  1275  0009B4  D013               	goto	l1190
  1276  0009B6                     l1182:
  1277                           
  1278                           ;lcd.c: 74: else if ( lcd.PORT == &PORTB ) {
  1279  0009B6  0E81               	movlw	129
  1280  0009B8  183C               	xorwf	_lcd,w,c
  1281  0009BA  E107               	bnz	l1186
  1282  0009BC  0E0F               	movlw	15
  1283  0009BE  183D               	xorwf	_lcd+1,w,c
  1284  0009C0  A4D8               	btfss	status,2,c
  1285  0009C2  D003               	goto	l1186
  1286                           
  1287                           ;lcd.c: 75: TRISB = 0x00;
  1288  0009C4  0E00               	movlw	0
  1289  0009C6  6E93               	movwf	3987,c	;volatile
  1290                           
  1291                           ;lcd.c: 76: }
  1292  0009C8  D009               	goto	l1190
  1293  0009CA                     l1186:
  1294                           
  1295                           ;lcd.c: 77: else if ( lcd.PORT == &PORTC ) {
  1296  0009CA  0E82               	movlw	130
  1297  0009CC  183C               	xorwf	_lcd,w,c
  1298  0009CE  E149               	bnz	l39
  1299  0009D0  0E0F               	movlw	15
  1300  0009D2  183D               	xorwf	_lcd+1,w,c
  1301  0009D4  A4D8               	btfss	status,2,c
  1302  0009D6  0012               	return	
  1303                           
  1304                           ;lcd.c: 78: TRISC = 0x00;
  1305  0009D8  0E00               	movlw	0
  1306  0009DA  6E94               	movwf	3988,c	;volatile
  1307  0009DC                     l1190:
  1308                           
  1309                           ;lcd.c: 90: }
  1310                           ;lcd.c: 93: _delay((unsigned long)((20)*(16000000/4000.0)));
  1311  0009DC  0E68               	movlw	104
  1312  0009DE  6E1C               	movwf	??_LCD_Init& (0+255),c
  1313  0009E0  0EE4               	movlw	228
  1314  0009E2                     u767:
  1315  0009E2  2EE8               	decfsz	wreg,f,c
  1316  0009E4  D7FE               	bra	u767
  1317  0009E6  2E1C               	decfsz	??_LCD_Init& (0+255),f,c
  1318  0009E8  D7FC               	bra	u767
  1319  0009EA  D000               	nop2	
  1320                           
  1321                           ;lcd.c: 96: LCD_Write(0x03);
  1322  0009EC  0E03               	movlw	3
  1323  0009EE  EC32  F005         	call	_LCD_Write
  1324                           
  1325                           ;lcd.c: 97: _delay((unsigned long)((5)*(16000000/4000.0)));
  1326  0009F2  0E1A               	movlw	26
  1327  0009F4  6E1C               	movwf	??_LCD_Init& (0+255),c
  1328  0009F6  0EF8               	movlw	248
  1329  0009F8                     u777:
  1330  0009F8  2EE8               	decfsz	wreg,f,c
  1331  0009FA  D7FE               	bra	u777
  1332  0009FC  2E1C               	decfsz	??_LCD_Init& (0+255),f,c
  1333  0009FE  D7FC               	bra	u777
  1334  000A00  D000               	nop2	
  1335                           
  1336                           ;lcd.c: 98: LCD_Write(0x03);
  1337  000A02  0E03               	movlw	3
  1338  000A04  EC32  F005         	call	_LCD_Write
  1339                           
  1340                           ;lcd.c: 99: _delay((unsigned long)((16)*(16000000/4000.0)));
  1341  000A08  0E54               	movlw	84
  1342  000A0A  6E1C               	movwf	??_LCD_Init& (0+255),c
  1343  000A0C  0E1C               	movlw	28
  1344  000A0E                     u787:
  1345  000A0E  2EE8               	decfsz	wreg,f,c
  1346  000A10  D7FE               	bra	u787
  1347  000A12  2E1C               	decfsz	??_LCD_Init& (0+255),f,c
  1348  000A14  D7FC               	bra	u787
  1349  000A16  D000               	nop2	
  1350                           
  1351                           ;lcd.c: 100: LCD_Write(0x03);
  1352  000A18  0E03               	movlw	3
  1353  000A1A  EC32  F005         	call	_LCD_Write
  1354                           
  1355                           ;lcd.c: 103: LCD_Write(0x02);
  1356  000A1E  0E02               	movlw	2
  1357  000A20  EC32  F005         	call	_LCD_Write
  1358                           
  1359                           ;lcd.c: 106: do { LCD_Write( (0x28 & 0xF0) >> 4 ); LCD_Write( 0x28 & 0x0F); } while ( 0 
      +                          );
  1360  000A24  0E02               	movlw	2
  1361  000A26  EC32  F005         	call	_LCD_Write
  1362  000A2A  0E08               	movlw	8
  1363  000A2C  EC32  F005         	call	_LCD_Write
  1364                           
  1365                           ;lcd.c: 109: do { LCD_Write( (0x06 & 0xF0) >> 4 ); LCD_Write( 0x06 & 0x0F); } while ( 0 
      +                          );
  1366  000A30  0E00               	movlw	0
  1367  000A32  EC32  F005         	call	_LCD_Write
  1368  000A36  0E06               	movlw	6
  1369  000A38  EC32  F005         	call	_LCD_Write
  1370                           
  1371                           ;lcd.c: 111: do { unsigned char cmd = 0x08; if ( 1 == 1 ) { cmd |= 1 << 2; } if ( 0 == 1
      +                           ) { cmd |= 1 << 1; } if ( 0 == 1 ) { cmd |= 1; } do { LCD_Write( (cmd & 0xF0) >> 4 ); L
      +                          CD_Write( cmd & 0x0F); } while ( 0 ); } while ( 0 );
  1372  000A3C  0E08               	movlw	8
  1373  000A3E  6E1D               	movwf	LCD_Init@cmd,c
  1374  000A40  841D               	bsf	LCD_Init@cmd,2,c
  1375  000A42  381D               	swapf	LCD_Init@cmd,w,c
  1376  000A44  0B0F               	andlw	15
  1377  000A46  0B0F               	andlw	15
  1378  000A48  EC32  F005         	call	_LCD_Write
  1379  000A4C  501D               	movf	LCD_Init@cmd,w,c
  1380  000A4E  0B0F               	andlw	15
  1381  000A50  EC32  F005         	call	_LCD_Write
  1382                           
  1383                           ;lcd.c: 113: do { LCD_Write( (0x01 & 0xF0) >> 4 ); LCD_Write( 0x01 & 0x0F); } while ( 0 
      +                          );
  1384  000A54  0E00               	movlw	0
  1385  000A56  EC32  F005         	call	_LCD_Write
  1386  000A5A  0E01               	movlw	1
  1387  000A5C  EC32  F005         	call	_LCD_Write
  1388  000A60  0012               	return	
  1389  000A62                     l39:
  1390  000A62  0012               	return		;funcret
  1391  000A64                     __end_of_LCD_Init:
  1392                           	opt stack 0
  1393                           tblptru	equ	0xFF8
  1394                           tblptrh	equ	0xFF7
  1395                           tblptrl	equ	0xFF6
  1396                           tablat	equ	0xFF5
  1397                           prodh	equ	0xFF4
  1398                           prodl	equ	0xFF3
  1399                           intcon	equ	0xFF2
  1400                           intcon2	equ	0xFF1
  1401                           postinc0	equ	0xFEE
  1402                           plusw0	equ	0xFEB
  1403                           wreg	equ	0xFE8
  1404                           postdec1	equ	0xFE5
  1405                           plusw1	equ	0xFE3
  1406                           fsr1l	equ	0xFE1
  1407                           indf2	equ	0xFDF
  1408                           plusw2	equ	0xFDB
  1409                           fsr2h	equ	0xFDA
  1410                           fsr2l	equ	0xFD9
  1411                           status	equ	0xFD8
  1412                           
  1413 ;; *************** function _LCD_Write *****************
  1414 ;; Defined at:
  1415 ;;		line 52 in file "lcd.c"
  1416 ;; Parameters:    Size  Location     Type
  1417 ;;  c               1    wreg     unsigned char 
  1418 ;; Auto vars:     Size  Location     Type
  1419 ;;  c               1   21[COMRAM] unsigned char 
  1420 ;; Return value:  Size  Location     Type
  1421 ;;                  1    wreg      void 
  1422 ;; Registers used:
  1423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1424 ;; Tracked objects:
  1425 ;;		On entry : 0/0
  1426 ;;		On exit  : 0/0
  1427 ;;		Unchanged: 0/0
  1428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1429 ;;      Params:         0       0       0       0       0       0       0
  1430 ;;      Locals:         1       0       0       0       0       0       0
  1431 ;;      Temps:          3       0       0       0       0       0       0
  1432 ;;      Totals:         4       0       0       0       0       0       0
  1433 ;;Total ram usage:        4 bytes
  1434 ;; Hardware stack levels used:    1
  1435 ;; Hardware stack levels required when called:    2
  1436 ;; This function calls:
  1437 ;;		_LCD_Out
  1438 ;; This function is called by:
  1439 ;;		_LCD_Init
  1440 ;;		_main
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444                           	psect	text7
  1445  000A64                     __ptext7:
  1446                           	opt stack 0
  1447  000A64                     _LCD_Write:
  1448                           	opt stack 28
  1449                           
  1450                           ;incstack = 0
  1451                           ;LCD_Write@c stored from wreg
  1452  000A64  6E16               	movwf	LCD_Write@c,c
  1453                           
  1454                           ;lcd.c: 53: *(lcd.PORT) &= ~(1 << lcd.RS);
  1455  000A66  503E               	movf	_lcd+2,w,c
  1456  000A68  0B07               	andlw	7
  1457  000A6A  6E13               	movwf	??_LCD_Write& (0+255),c
  1458  000A6C  0E01               	movlw	1
  1459  000A6E  6E14               	movwf	(??_LCD_Write+1)& (0+255),c
  1460  000A70  2A13               	incf	??_LCD_Write,f,c
  1461  000A72  D002               	goto	u504
  1462  000A74                     u505:
  1463  000A74  90D8               	bcf	status,0,c
  1464  000A76  3614               	rlcf	??_LCD_Write+1,f,c
  1465  000A78                     u504:
  1466  000A78  2E13               	decfsz	??_LCD_Write,f,c
  1467  000A7A  D7FC               	goto	u505
  1468  000A7C  5014               	movf	??_LCD_Write+1,w,c
  1469  000A7E  0AFF               	xorlw	255
  1470  000A80  6E15               	movwf	(??_LCD_Write+2)& (0+255),c
  1471  000A82  C03C  FFD9         	movff	_lcd,fsr2l
  1472  000A86  C03D  FFDA         	movff	_lcd+1,fsr2h
  1473  000A8A  5015               	movf	??_LCD_Write+2,w,c
  1474  000A8C  16DF               	andwf	indf2,f,c
  1475                           
  1476                           ;lcd.c: 54: LCD_Out(c);
  1477  000A8E  5016               	movf	LCD_Write@c,w,c
  1478  000A90  EC0A  F003         	call	_LCD_Out
  1479                           
  1480                           ;lcd.c: 55: *(lcd.PORT) |= 1 << lcd.EN;
  1481  000A94  303E               	rrcf	_lcd+2,w,c
  1482  000A96  32E8               	rrcf	wreg,f,c
  1483  000A98  32E8               	rrcf	wreg,f,c
  1484  000A9A  0B07               	andlw	7
  1485  000A9C  6E13               	movwf	??_LCD_Write& (0+255),c
  1486  000A9E  0E01               	movlw	1
  1487  000AA0  6E14               	movwf	(??_LCD_Write+1)& (0+255),c
  1488  000AA2  2A13               	incf	??_LCD_Write,f,c
  1489  000AA4  D002               	goto	u514
  1490  000AA6                     u515:
  1491  000AA6  90D8               	bcf	status,0,c
  1492  000AA8  3614               	rlcf	??_LCD_Write+1,f,c
  1493  000AAA                     u514:
  1494  000AAA  2E13               	decfsz	??_LCD_Write,f,c
  1495  000AAC  D7FC               	goto	u515
  1496  000AAE  C03C  FFD9         	movff	_lcd,fsr2l
  1497  000AB2  C03D  FFDA         	movff	_lcd+1,fsr2h
  1498  000AB6  5014               	movf	??_LCD_Write+1,w,c
  1499  000AB8  12DF               	iorwf	indf2,f,c
  1500                           
  1501                           ;lcd.c: 56: _delay((unsigned long)((4)*(16000000/4000.0)));
  1502  000ABA  0E15               	movlw	21
  1503  000ABC  6E13               	movwf	??_LCD_Write& (0+255),c
  1504  000ABE  0EC6               	movlw	198
  1505  000AC0                     u797:
  1506  000AC0  2EE8               	decfsz	wreg,f,c
  1507  000AC2  D7FE               	bra	u797
  1508  000AC4  2E13               	decfsz	??_LCD_Write& (0+255),f,c
  1509  000AC6  D7FC               	bra	u797
  1510  000AC8  D000               	nop2	
  1511                           
  1512                           ;lcd.c: 57: *(lcd.PORT) &= ~(1 << lcd.EN);
  1513  000ACA  303E               	rrcf	_lcd+2,w,c
  1514  000ACC  32E8               	rrcf	wreg,f,c
  1515  000ACE  32E8               	rrcf	wreg,f,c
  1516  000AD0  0B07               	andlw	7
  1517  000AD2  6E13               	movwf	??_LCD_Write& (0+255),c
  1518  000AD4  0E01               	movlw	1
  1519  000AD6  6E14               	movwf	(??_LCD_Write+1)& (0+255),c
  1520  000AD8  2A13               	incf	??_LCD_Write,f,c
  1521  000ADA  D002               	goto	u524
  1522  000ADC                     u525:
  1523  000ADC  90D8               	bcf	status,0,c
  1524  000ADE  3614               	rlcf	??_LCD_Write+1,f,c
  1525  000AE0                     u524:
  1526  000AE0  2E13               	decfsz	??_LCD_Write,f,c
  1527  000AE2  D7FC               	goto	u525
  1528  000AE4  5014               	movf	??_LCD_Write+1,w,c
  1529  000AE6  0AFF               	xorlw	255
  1530  000AE8  6E15               	movwf	(??_LCD_Write+2)& (0+255),c
  1531  000AEA  C03C  FFD9         	movff	_lcd,fsr2l
  1532  000AEE  C03D  FFDA         	movff	_lcd+1,fsr2h
  1533  000AF2  5015               	movf	??_LCD_Write+2,w,c
  1534  000AF4  16DF               	andwf	indf2,f,c
  1535  000AF6  0012               	return		;funcret
  1536  000AF8                     __end_of_LCD_Write:
  1537                           	opt stack 0
  1538                           tblptru	equ	0xFF8
  1539                           tblptrh	equ	0xFF7
  1540                           tblptrl	equ	0xFF6
  1541                           tablat	equ	0xFF5
  1542                           prodh	equ	0xFF4
  1543                           prodl	equ	0xFF3
  1544                           intcon	equ	0xFF2
  1545                           intcon2	equ	0xFF1
  1546                           postinc0	equ	0xFEE
  1547                           plusw0	equ	0xFEB
  1548                           wreg	equ	0xFE8
  1549                           postdec1	equ	0xFE5
  1550                           plusw1	equ	0xFE3
  1551                           fsr1l	equ	0xFE1
  1552                           indf2	equ	0xFDF
  1553                           plusw2	equ	0xFDB
  1554                           fsr2h	equ	0xFDA
  1555                           fsr2l	equ	0xFD9
  1556                           status	equ	0xFD8
  1557                           
  1558 ;; *************** function _LCD_Out *****************
  1559 ;; Defined at:
  1560 ;;		line 21 in file "lcd.c"
  1561 ;; Parameters:    Size  Location     Type
  1562 ;;  c               1    wreg     unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  c               1   17[COMRAM] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  1    wreg      void 
  1567 ;; Registers used:
  1568 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1574 ;;      Params:         0       0       0       0       0       0       0
  1575 ;;      Locals:         1       0       0       0       0       0       0
  1576 ;;      Temps:          3       0       0       0       0       0       0
  1577 ;;      Totals:         4       0       0       0       0       0       0
  1578 ;;Total ram usage:        4 bytes
  1579 ;; Hardware stack levels used:    1
  1580 ;; Hardware stack levels required when called:    1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_LCD_Write
  1585 ;;		_LCD_putc
  1586 ;; This function uses a non-reentrant model
  1587 ;;
  1588                           
  1589                           	psect	text8
  1590  000614                     __ptext8:
  1591                           	opt stack 0
  1592  000614                     _LCD_Out:
  1593                           	opt stack 27
  1594                           
  1595                           ;incstack = 0
  1596                           ;LCD_Out@c stored from wreg
  1597  000614  6E12               	movwf	LCD_Out@c,c
  1598                           
  1599                           ;lcd.c: 22: if ( c & 1 ){
  1600  000616  A012               	btfss	LCD_Out@c,0,c
  1601  000618  D012               	goto	l1116
  1602                           
  1603                           ;lcd.c: 23: *(lcd.PORT) |= 1 << lcd.D4;
  1604  00061A  503F               	movf	_lcd+3,w,c
  1605  00061C  0B07               	andlw	7
  1606  00061E  6E0F               	movwf	??_LCD_Out& (0+255),c
  1607  000620  0E01               	movlw	1
  1608  000622  6E10               	movwf	(??_LCD_Out+1)& (0+255),c
  1609  000624  2A0F               	incf	??_LCD_Out,f,c
  1610  000626  D002               	goto	u394
  1611  000628                     u395:
  1612  000628  90D8               	bcf	status,0,c
  1613  00062A  3610               	rlcf	??_LCD_Out+1,f,c
  1614  00062C                     u394:
  1615  00062C  2E0F               	decfsz	??_LCD_Out,f,c
  1616  00062E  D7FC               	goto	u395
  1617  000630  C03C  FFD9         	movff	_lcd,fsr2l
  1618  000634  C03D  FFDA         	movff	_lcd+1,fsr2h
  1619  000638  5010               	movf	??_LCD_Out+1,w,c
  1620  00063A  12DF               	iorwf	indf2,f,c
  1621                           
  1622                           ;lcd.c: 24: }
  1623  00063C  D014               	goto	l1118
  1624  00063E                     l1116:
  1625                           
  1626                           ;lcd.c: 25: else {
  1627                           ;lcd.c: 26: *(lcd.PORT) &= ~(1 << lcd.D4);
  1628  00063E  503F               	movf	_lcd+3,w,c
  1629  000640  0B07               	andlw	7
  1630  000642  6E0F               	movwf	??_LCD_Out& (0+255),c
  1631  000644  0E01               	movlw	1
  1632  000646  6E10               	movwf	(??_LCD_Out+1)& (0+255),c
  1633  000648  2A0F               	incf	??_LCD_Out,f,c
  1634  00064A  D002               	goto	u404
  1635  00064C                     u405:
  1636  00064C  90D8               	bcf	status,0,c
  1637  00064E  3610               	rlcf	??_LCD_Out+1,f,c
  1638  000650                     u404:
  1639  000650  2E0F               	decfsz	??_LCD_Out,f,c
  1640  000652  D7FC               	goto	u405
  1641  000654  5010               	movf	??_LCD_Out+1,w,c
  1642  000656  0AFF               	xorlw	255
  1643  000658  6E11               	movwf	(??_LCD_Out+2)& (0+255),c
  1644  00065A  C03C  FFD9         	movff	_lcd,fsr2l
  1645  00065E  C03D  FFDA         	movff	_lcd+1,fsr2h
  1646  000662  5011               	movf	??_LCD_Out+2,w,c
  1647  000664  16DF               	andwf	indf2,f,c
  1648  000666                     l1118:
  1649                           
  1650                           ;lcd.c: 27: }
  1651                           ;lcd.c: 29: if ( c & 2 ) {
  1652  000666  A212               	btfss	LCD_Out@c,1,c
  1653  000668  D014               	goto	l1122
  1654                           
  1655                           ;lcd.c: 30: *(lcd.PORT) |= 1 << lcd.D5;
  1656  00066A  303F               	rrcf	_lcd+3,w,c
  1657  00066C  32E8               	rrcf	wreg,f,c
  1658  00066E  32E8               	rrcf	wreg,f,c
  1659  000670  0B07               	andlw	7
  1660  000672  6E0F               	movwf	??_LCD_Out& (0+255),c
  1661  000674  0E01               	movlw	1
  1662  000676  6E10               	movwf	(??_LCD_Out+1)& (0+255),c
  1663  000678  2A0F               	incf	??_LCD_Out,f,c
  1664  00067A  D002               	goto	u424
  1665  00067C                     u425:
  1666  00067C  90D8               	bcf	status,0,c
  1667  00067E  3610               	rlcf	??_LCD_Out+1,f,c
  1668  000680                     u424:
  1669  000680  2E0F               	decfsz	??_LCD_Out,f,c
  1670  000682  D7FC               	goto	u425
  1671  000684  C03C  FFD9         	movff	_lcd,fsr2l
  1672  000688  C03D  FFDA         	movff	_lcd+1,fsr2h
  1673  00068C  5010               	movf	??_LCD_Out+1,w,c
  1674  00068E  12DF               	iorwf	indf2,f,c
  1675                           
  1676                           ;lcd.c: 31: }
  1677  000690  D016               	goto	l1124
  1678  000692                     l1122:
  1679                           
  1680                           ;lcd.c: 32: else {
  1681                           ;lcd.c: 33: *(lcd.PORT) &= ~(1 << lcd.D5);
  1682  000692  303F               	rrcf	_lcd+3,w,c
  1683  000694  32E8               	rrcf	wreg,f,c
  1684  000696  32E8               	rrcf	wreg,f,c
  1685  000698  0B07               	andlw	7
  1686  00069A  6E0F               	movwf	??_LCD_Out& (0+255),c
  1687  00069C  0E01               	movlw	1
  1688  00069E  6E10               	movwf	(??_LCD_Out+1)& (0+255),c
  1689  0006A0  2A0F               	incf	??_LCD_Out,f,c
  1690  0006A2  D002               	goto	u434
  1691  0006A4                     u435:
  1692  0006A4  90D8               	bcf	status,0,c
  1693  0006A6  3610               	rlcf	??_LCD_Out+1,f,c
  1694  0006A8                     u434:
  1695  0006A8  2E0F               	decfsz	??_LCD_Out,f,c
  1696  0006AA  D7FC               	goto	u435
  1697  0006AC  5010               	movf	??_LCD_Out+1,w,c
  1698  0006AE  0AFF               	xorlw	255
  1699  0006B0  6E11               	movwf	(??_LCD_Out+2)& (0+255),c
  1700  0006B2  C03C  FFD9         	movff	_lcd,fsr2l
  1701  0006B6  C03D  FFDA         	movff	_lcd+1,fsr2h
  1702  0006BA  5011               	movf	??_LCD_Out+2,w,c
  1703  0006BC  16DF               	andwf	indf2,f,c
  1704  0006BE                     l1124:
  1705                           
  1706                           ;lcd.c: 34: }
  1707                           ;lcd.c: 36: if ( c & 4 ) {
  1708  0006BE  A412               	btfss	LCD_Out@c,2,c
  1709  0006C0  D012               	goto	l1128
  1710                           
  1711                           ;lcd.c: 37: *(lcd.PORT) |= 1 << lcd.D6;
  1712  0006C2  5040               	movf	_lcd+4,w,c
  1713  0006C4  0B07               	andlw	7
  1714  0006C6  6E0F               	movwf	??_LCD_Out& (0+255),c
  1715  0006C8  0E01               	movlw	1
  1716  0006CA  6E10               	movwf	(??_LCD_Out+1)& (0+255),c
  1717  0006CC  2A0F               	incf	??_LCD_Out,f,c
  1718  0006CE  D002               	goto	u454
  1719  0006D0                     u455:
  1720  0006D0  90D8               	bcf	status,0,c
  1721  0006D2  3610               	rlcf	??_LCD_Out+1,f,c
  1722  0006D4                     u454:
  1723  0006D4  2E0F               	decfsz	??_LCD_Out,f,c
  1724  0006D6  D7FC               	goto	u455
  1725  0006D8  C03C  FFD9         	movff	_lcd,fsr2l
  1726  0006DC  C03D  FFDA         	movff	_lcd+1,fsr2h
  1727  0006E0  5010               	movf	??_LCD_Out+1,w,c
  1728  0006E2  12DF               	iorwf	indf2,f,c
  1729                           
  1730                           ;lcd.c: 38: }
  1731  0006E4  D014               	goto	l1130
  1732  0006E6                     l1128:
  1733                           
  1734                           ;lcd.c: 39: else {
  1735                           ;lcd.c: 40: *(lcd.PORT) &= ~(1 << lcd.D6);
  1736  0006E6  5040               	movf	_lcd+4,w,c
  1737  0006E8  0B07               	andlw	7
  1738  0006EA  6E0F               	movwf	??_LCD_Out& (0+255),c
  1739  0006EC  0E01               	movlw	1
  1740  0006EE  6E10               	movwf	(??_LCD_Out+1)& (0+255),c
  1741  0006F0  2A0F               	incf	??_LCD_Out,f,c
  1742  0006F2  D002               	goto	u464
  1743  0006F4                     u465:
  1744  0006F4  90D8               	bcf	status,0,c
  1745  0006F6  3610               	rlcf	??_LCD_Out+1,f,c
  1746  0006F8                     u464:
  1747  0006F8  2E0F               	decfsz	??_LCD_Out,f,c
  1748  0006FA  D7FC               	goto	u465
  1749  0006FC  5010               	movf	??_LCD_Out+1,w,c
  1750  0006FE  0AFF               	xorlw	255
  1751  000700  6E11               	movwf	(??_LCD_Out+2)& (0+255),c
  1752  000702  C03C  FFD9         	movff	_lcd,fsr2l
  1753  000706  C03D  FFDA         	movff	_lcd+1,fsr2h
  1754  00070A  5011               	movf	??_LCD_Out+2,w,c
  1755  00070C  16DF               	andwf	indf2,f,c
  1756  00070E                     l1130:
  1757                           
  1758                           ;lcd.c: 41: }
  1759                           ;lcd.c: 43: if ( c & 8 ) {
  1760  00070E  A612               	btfss	LCD_Out@c,3,c
  1761  000710  D014               	goto	l1134
  1762                           
  1763                           ;lcd.c: 44: *(lcd.PORT) |= 1 << lcd.D7;
  1764  000712  3040               	rrcf	_lcd+4,w,c
  1765  000714  32E8               	rrcf	wreg,f,c
  1766  000716  32E8               	rrcf	wreg,f,c
  1767  000718  0B07               	andlw	7
  1768  00071A  6E0F               	movwf	??_LCD_Out& (0+255),c
  1769  00071C  0E01               	movlw	1
  1770  00071E  6E10               	movwf	(??_LCD_Out+1)& (0+255),c
  1771  000720  2A0F               	incf	??_LCD_Out,f,c
  1772  000722  D002               	goto	u484
  1773  000724                     u485:
  1774  000724  90D8               	bcf	status,0,c
  1775  000726  3610               	rlcf	??_LCD_Out+1,f,c
  1776  000728                     u484:
  1777  000728  2E0F               	decfsz	??_LCD_Out,f,c
  1778  00072A  D7FC               	goto	u485
  1779  00072C  C03C  FFD9         	movff	_lcd,fsr2l
  1780  000730  C03D  FFDA         	movff	_lcd+1,fsr2h
  1781  000734  5010               	movf	??_LCD_Out+1,w,c
  1782  000736  12DF               	iorwf	indf2,f,c
  1783                           
  1784                           ;lcd.c: 45: }
  1785  000738  0012               	return	
  1786  00073A                     l1134:
  1787                           
  1788                           ;lcd.c: 46: else {
  1789                           ;lcd.c: 47: *(lcd.PORT) &= ~(1 << lcd.D7);
  1790  00073A  3040               	rrcf	_lcd+4,w,c
  1791  00073C  32E8               	rrcf	wreg,f,c
  1792  00073E  32E8               	rrcf	wreg,f,c
  1793  000740  0B07               	andlw	7
  1794  000742  6E0F               	movwf	??_LCD_Out& (0+255),c
  1795  000744  0E01               	movlw	1
  1796  000746  6E10               	movwf	(??_LCD_Out+1)& (0+255),c
  1797  000748  2A0F               	incf	??_LCD_Out,f,c
  1798  00074A  D002               	goto	u494
  1799  00074C                     u495:
  1800  00074C  90D8               	bcf	status,0,c
  1801  00074E  3610               	rlcf	??_LCD_Out+1,f,c
  1802  000750                     u494:
  1803  000750  2E0F               	decfsz	??_LCD_Out,f,c
  1804  000752  D7FC               	goto	u495
  1805  000754  5010               	movf	??_LCD_Out+1,w,c
  1806  000756  0AFF               	xorlw	255
  1807  000758  6E11               	movwf	(??_LCD_Out+2)& (0+255),c
  1808  00075A  C03C  FFD9         	movff	_lcd,fsr2l
  1809  00075E  C03D  FFDA         	movff	_lcd+1,fsr2h
  1810  000762  5011               	movf	??_LCD_Out+2,w,c
  1811  000764  16DF               	andwf	indf2,f,c
  1812  000766  0012               	return	
  1813  000768                     __end_of_LCD_Out:
  1814                           	opt stack 0
  1815                           tblptru	equ	0xFF8
  1816                           tblptrh	equ	0xFF7
  1817                           tblptrl	equ	0xFF6
  1818                           tablat	equ	0xFF5
  1819                           prodh	equ	0xFF4
  1820                           prodl	equ	0xFF3
  1821                           intcon	equ	0xFF2
  1822                           intcon2	equ	0xFF1
  1823                           postinc0	equ	0xFEE
  1824                           plusw0	equ	0xFEB
  1825                           wreg	equ	0xFE8
  1826                           postdec1	equ	0xFE5
  1827                           plusw1	equ	0xFE3
  1828                           fsr1l	equ	0xFE1
  1829                           indf2	equ	0xFDF
  1830                           plusw2	equ	0xFDB
  1831                           fsr2h	equ	0xFDA
  1832                           fsr2l	equ	0xFD9
  1833                           status	equ	0xFD8
  1834                           
  1835 ;; *************** function _ISR *****************
  1836 ;; Defined at:
  1837 ;;		line 38 in file "main.c"
  1838 ;; Parameters:    Size  Location     Type
  1839 ;;		None
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, status,2, status,0
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1851 ;;      Params:         0       0       0       0       0       0       0
  1852 ;;      Locals:         0       0       0       0       0       0       0
  1853 ;;      Temps:         14       0       0       0       0       0       0
  1854 ;;      Totals:        14       0       0       0       0       0       0
  1855 ;;Total ram usage:       14 bytes
  1856 ;; Hardware stack levels used:    1
  1857 ;; This function calls:
  1858 ;;		Nothing
  1859 ;; This function is called by:
  1860 ;;		Interrupt level 2
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864                           	psect	intcode
  1865  000008                     __pintcode:
  1866                           	opt stack 0
  1867  000008                     _ISR:
  1868                           	opt stack 27
  1869                           
  1870                           ;incstack = 0
  1871  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  1872  00000A  CFFA F001          	movff	pclath,??_ISR
  1873  00000E  CFFB F002          	movff	pclatu,??_ISR+1
  1874  000012  CFE9 F003          	movff	fsr0l,??_ISR+2
  1875  000016  CFEA F004          	movff	fsr0h,??_ISR+3
  1876  00001A  CFE1 F005          	movff	fsr1l,??_ISR+4
  1877  00001E  CFE2 F006          	movff	fsr1h,??_ISR+5
  1878  000022  CFD9 F007          	movff	fsr2l,??_ISR+6
  1879  000026  CFDA F008          	movff	fsr2h,??_ISR+7
  1880  00002A  CFF3 F009          	movff	prodl,??_ISR+8
  1881  00002E  CFF4 F00A          	movff	prodh,??_ISR+9
  1882  000032  CFF6 F00B          	movff	tblptrl,??_ISR+10
  1883  000036  CFF7 F00C          	movff	tblptrh,??_ISR+11
  1884  00003A  CFF8 F00D          	movff	tblptru,??_ISR+12
  1885  00003E  CFF5 F00E          	movff	tablat,??_ISR+13
  1886                           
  1887                           ;main.c: 39: if(INTCONbits.TMR0IF){
  1888  000042  A4F2               	btfss	intcon,2,c	;volatile
  1889  000044  D012               	goto	i2l122
  1890                           
  1891                           ;main.c: 40: ++RTCC_Count;
  1892  000046  4A41               	infsnz	_RTCC_Count,f,c
  1893  000048  2A42               	incf	_RTCC_Count+1,f,c
  1894                           
  1895                           ;main.c: 41: if (RTCC_Count >= 1000){
  1896  00004A  0EE8               	movlw	232
  1897  00004C  5C41               	subwf	_RTCC_Count,w,c
  1898  00004E  0E03               	movlw	3
  1899  000050  5842               	subwfb	_RTCC_Count+1,w,c
  1900  000052  A0D8               	btfss	status,0,c
  1901  000054  D005               	goto	i2l1002
  1902                           
  1903                           ;main.c: 42: PORTCbits.RC6 ^= 1;
  1904  000056  7C82               	btg	3970,6,c	;volatile
  1905                           
  1906                           ;main.c: 43: RTCC_Count = 0;
  1907  000058  0E00               	movlw	0
  1908  00005A  6E42               	movwf	_RTCC_Count+1,c
  1909  00005C  0E00               	movlw	0
  1910  00005E  6E41               	movwf	_RTCC_Count,c
  1911  000060                     i2l1002:
  1912                           
  1913                           ;main.c: 44: }
  1914                           ;main.c: 45: TMR0H = 0xF8;
  1915  000060  0EF8               	movlw	248
  1916  000062  6ED7               	movwf	4055,c	;volatile
  1917                           
  1918                           ;main.c: 46: TMR0L = 0x30;
  1919  000064  0E30               	movlw	48
  1920  000066  6ED6               	movwf	4054,c	;volatile
  1921                           
  1922                           ;main.c: 47: INTCONbits.TMR0IF = 0;
  1923  000068  94F2               	bcf	intcon,2,c	;volatile
  1924  00006A                     i2l122:
  1925  00006A  C00E  FFF5         	movff	??_ISR+13,tablat
  1926  00006E  C00D  FFF8         	movff	??_ISR+12,tblptru
  1927  000072  C00C  FFF7         	movff	??_ISR+11,tblptrh
  1928  000076  C00B  FFF6         	movff	??_ISR+10,tblptrl
  1929  00007A  C00A  FFF4         	movff	??_ISR+9,prodh
  1930  00007E  C009  FFF3         	movff	??_ISR+8,prodl
  1931  000082  C008  FFDA         	movff	??_ISR+7,fsr2h
  1932  000086  C007  FFD9         	movff	??_ISR+6,fsr2l
  1933  00008A  C006  FFE2         	movff	??_ISR+5,fsr1h
  1934  00008E  C005  FFE1         	movff	??_ISR+4,fsr1l
  1935  000092  C004  FFEA         	movff	??_ISR+3,fsr0h
  1936  000096  C003  FFE9         	movff	??_ISR+2,fsr0l
  1937  00009A  C002  FFFB         	movff	??_ISR+1,pclatu
  1938  00009E  C001  FFFA         	movff	??_ISR,pclath
  1939  0000A2  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1940  0000A4  0011               	retfie		f
  1941  0000A6                     __end_of_ISR:
  1942                           	opt stack 0
  1943                           pclatu	equ	0xFFB
  1944                           pclath	equ	0xFFA
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           prodh	equ	0xFF4
  1950                           prodl	equ	0xFF3
  1951                           intcon	equ	0xFF2
  1952                           intcon2	equ	0xFF1
  1953                           postinc0	equ	0xFEE
  1954                           plusw0	equ	0xFEB
  1955                           fsr0h	equ	0xFEA
  1956                           fsr0l	equ	0xFE9
  1957                           wreg	equ	0xFE8
  1958                           postdec1	equ	0xFE5
  1959                           plusw1	equ	0xFE3
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           indf2	equ	0xFDF
  1963                           plusw2	equ	0xFDB
  1964                           fsr2h	equ	0xFDA
  1965                           fsr2l	equ	0xFD9
  1966                           status	equ	0xFD8
  1967                           pclatu	equ	0xFFB
  1968                           pclath	equ	0xFFA
  1969                           tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           prodh	equ	0xFF4
  1974                           prodl	equ	0xFF3
  1975                           intcon	equ	0xFF2
  1976                           intcon2	equ	0xFF1
  1977                           postinc0	equ	0xFEE
  1978                           plusw0	equ	0xFEB
  1979                           fsr0h	equ	0xFEA
  1980                           fsr0l	equ	0xFE9
  1981                           wreg	equ	0xFE8
  1982                           postdec1	equ	0xFE5
  1983                           plusw1	equ	0xFE3
  1984                           fsr1h	equ	0xFE2
  1985                           fsr1l	equ	0xFE1
  1986                           indf2	equ	0xFDF
  1987                           plusw2	equ	0xFDB
  1988                           fsr2h	equ	0xFDA
  1989                           fsr2l	equ	0xFD9
  1990                           status	equ	0xFD8
  1991                           
  1992                           	psect	rparam
  1993  0000                     pclatu	equ	0xFFB
  1994                           pclath	equ	0xFFA
  1995                           tblptru	equ	0xFF8
  1996                           tblptrh	equ	0xFF7
  1997                           tblptrl	equ	0xFF6
  1998                           tablat	equ	0xFF5
  1999                           prodh	equ	0xFF4
  2000                           prodl	equ	0xFF3
  2001                           intcon	equ	0xFF2
  2002                           intcon2	equ	0xFF1
  2003                           postinc0	equ	0xFEE
  2004                           plusw0	equ	0xFEB
  2005                           fsr0h	equ	0xFEA
  2006                           fsr0l	equ	0xFE9
  2007                           wreg	equ	0xFE8
  2008                           postdec1	equ	0xFE5
  2009                           plusw1	equ	0xFE3
  2010                           fsr1h	equ	0xFE2
  2011                           fsr1l	equ	0xFE1
  2012                           indf2	equ	0xFDF
  2013                           plusw2	equ	0xFDB
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8
  2017                           
  2018                           	psect	temp
  2019  000043                     btemp:
  2020                           	opt stack 0
  2021  000043                     	ds	1
  2022  0000                     int$flags	set	btemp
  2023                           pclatu	equ	0xFFB
  2024                           pclath	equ	0xFFA
  2025                           tblptru	equ	0xFF8
  2026                           tblptrh	equ	0xFF7
  2027                           tblptrl	equ	0xFF6
  2028                           tablat	equ	0xFF5
  2029                           prodh	equ	0xFF4
  2030                           prodl	equ	0xFF3
  2031                           intcon	equ	0xFF2
  2032                           intcon2	equ	0xFF1
  2033                           postinc0	equ	0xFEE
  2034                           plusw0	equ	0xFEB
  2035                           fsr0h	equ	0xFEA
  2036                           fsr0l	equ	0xFE9
  2037                           wreg	equ	0xFE8
  2038                           postdec1	equ	0xFE5
  2039                           plusw1	equ	0xFE3
  2040                           fsr1h	equ	0xFE2
  2041                           fsr1l	equ	0xFE1
  2042                           indf2	equ	0xFDF
  2043                           plusw2	equ	0xFDB
  2044                           fsr2h	equ	0xFDA
  2045                           fsr2l	equ	0xFD9
  2046                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    0
    Data        55
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     37      66
    BANK0           160      0      33
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    F6846.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR_1[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR_1[1]), 

    LCD_putrs@a	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_1(CODE[17]), 

    display.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR_1[1]), 

    S21$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR_1[1]), 

    lcd.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTB(SFR_1[1]), 


Critical Paths under _main in COMRAM

    _main->_LCD_Init
    _LCD_putrs->_LCD_putc
    _LCD_putc->_LCD_Out
    _LCD_Init->_LCD_Write
    _LCD_Write->_LCD_Out

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0    1449
                                             29 COMRAM     8     8      0
                           _LCD_Init
                          _LCD_Write
                           _LCD_putc
                          _LCD_putrs
                        _MCU_Delayms
                           _MCU_Init
 ---------------------------------------------------------------------------------
 (1) _MCU_Init                                             0     0      0       0
                          _RTCC_Init
 ---------------------------------------------------------------------------------
 (2) _RTCC_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MCU_Delayms                                          5     3      2     426
                                             14 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _LCD_putrs                                            6     4      2     298
                                             22 COMRAM     6     4      2
                           _LCD_putc
 ---------------------------------------------------------------------------------
 (2) _LCD_putc                                             4     4      0     132
                                             18 COMRAM     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             7     2      5     256
                                             22 COMRAM     7     2      5
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (1) _LCD_Write                                            4     4      0     110
                                             18 COMRAM     4     4      0
                            _LCD_Out
 ---------------------------------------------------------------------------------
 (3) _LCD_Out                                              4     4      0      88
                                             14 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_Write
       _LCD_Out
   _LCD_Write
     _LCD_Out
   _LCD_putc
     _LCD_Out
   _LCD_putrs
     _LCD_putc
       _LCD_Out
   _MCU_Delayms
   _MCU_Init
     _RTCC_Init

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      21       4       20.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     25      42       1       70.2%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      63       9        0.0%
DATA                 0      0      63      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Aug 16 01:16:02 2020

                     l39 0A62             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000                      l218 0BBE  
           __CFG_CPB$OFF 000000                      u404 0650                      u405 064C  
                    u424 0680                      u504 0A78                      u425 067C  
                    u505 0A74                      u434 06A8                      u514 0AAA  
           __CFG_CPD$OFF 000000                      u435 06A4                      u515 0AA6  
                    u524 0AE0                      _ISR 0008                      u525 0ADC  
                    u454 06D4                      u534 08B8                      u455 06D0  
                    u535 08B4                      u464 06F8                      u544 08E8  
                    u465 06F4                      u545 08E4                      u394 062C  
                    u554 0916                      u395 0628                      u555 0912  
                    u651 0776                      u484 0728                      u564 094A  
                    u485 0724                      u581 099A                      u565 0946  
                    u661 0788                      u494 0750                      u574 0978  
                    u495 074C                      u575 0974                      u737 0BB0  
                    u747 08FA                      u757 095C                      u767 09E2  
                    u777 09F8                      u787 0A0E                      u797 0AC0  
        LCD_Init@display 0017                      _lcd 003C                      prod 000FF3  
                    wreg 000FE8             __CFG_LVP$OFF 000000                     ?_ISR 0001  
        __end_of_LCD_Out 0768                     l1130 070E                     l1122 0692  
                   l1124 06BE                     l1116 063E                     l1134 073A  
                   l1118 0666                     l1230 0B60                     l1128 06E6  
                   l1234 0B80                     l1306 0802                     l1324 082A  
                   l1190 09DC                     l1182 09B6                     l1246 0BAA  
                   l1350 0870                     l1328 0832                     l1186 09CA  
                   l1346 0868                     l1338 0858                     l1268 07A0  
                   l1358 0896                     l1294 07D4                     l1298 07DC  
                   STR_1 0601                     _main 0768                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0043            __CFG_BORV$190 000000                     prodh 000FF4  
                   prodl 000FF3                     start 00A6       __size_of_LCD_Write 0094  
          __CFG_IESO$OFF 000000              LCD_Init@cmd 001D             ___param_bank 000000  
     __size_of_LCD_putrs 004A                    ??_ISR 0001         __end_of_LCD_Init 0A64  
       __end_of_LCD_putc 0990                    ?_main 0001         __end_of_MCU_Init 0C32  
                  i2l122 006A                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
           ?_MCU_Delayms 000F            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000       __size_of_RTCC_Init 0024           __CFG_EBTRB$OFF 000000  
     __CFG_MCLRE$EXTMCLR 000000                    main@c 0023           __CFG_BOREN$OFF 000000  
                  pclath 000FFA                    tablat 000FF5                    plusw0 000FEB  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
        __initialization 0AF8             __end_of_main 08A4                   ??_main 001E  
          __activetblptr 000001                ??_LCD_Out 000F        __end_of_LCD_Write 0AF8  
      __end_of_LCD_putrs 0BA0                   _ANSELA 000F38                   _ANSELB 000F39  
                 _ANSELC 000F3A                   i2l1002 0060           __CFG_WDTEN$OFF 000000  
         __CFG_XINST$OFF 000000        __end_of_RTCC_Init 0BF0           __CFG_STVREN$ON 000000  
                 clear_0 0B3E                   _text_1 0026                   _text_2 0060  
           __pdataCOMRAM 0026             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8          __CFG_HFOFST$OFF 000000  
             __accesstop 0060  __end_of__initialization 0B44                ?_LCD_Init 0017  
        __CFG_PBADEN$OFF 000000                ?_LCD_putc 0001            ___rparam_used 000001  
              ?_MCU_Init 0001           __pcstackCOMRAM 0001             __pidataBANK0 0BF0  
              LCD_putc@c 0016     __size_of_MCU_Delayms 002C          __CFG_PLLCFG$OFF 000000  
             ??_LCD_Init 001C               ??_LCD_putc 0013               ??_MCU_Init 000F  
     __CFG_CCP2MX$PORTC1 000000       __CFG_CCP3MX$PORTB5 000000                  _LCD_Out 0614  
        __CFG_PWRTEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
           __psmallconst 0600                  __pcinit 0AF8                  __ramtop 0600  
                __ptext0 0768                  __ptext1 0C12                  __ptext2 0BCC  
                __ptext3 0BA0                  __ptext4 0B56                  __ptext5 08A4  
                __ptext6 0990                  __ptext7 0A64                  __ptext8 0614  
              _T0CONbits 000FD5             __size_of_ISR 009E                  main@lcd 001E  
              _LCD_Write 0A64     end_of_initialization 0B44                _LCD_putrs 0B56  
                postdec1 000FE5                  postinc0 000FEE                _RTCC_Init 0BCC  
              _PORTCbits 000F82                _TRISCbits 000F94               ?_LCD_Write 0001  
             ?_LCD_putrs 0017        __size_of_LCD_Init 00D4        __size_of_LCD_putc 00EC  
      __size_of_MCU_Init 0020            __pidataCOMRAM 0C32               LCD_Write@c 0016  
             ?_RTCC_Init 0001      start_initialization 0AF8              __end_of_ISR 00A6  
             LCD_putrs@a 0017               LCD_putrs@i 001B              __pdataBANK0 0060  
        MCU_Delayms@time 000F            ??_MCU_Delayms 0011                 ?_LCD_Out 0001  
            __pbssCOMRAM 003C                 LCD_Out@c 0012              ??_LCD_Write 0013  
            ??_LCD_putrs 0019                __pintcode 0008              ??_RTCC_Init 000F  
       __CFG_PRICLKEN$ON 000000              __smallconst 0600      __end_of_MCU_Delayms 0BCC  
               _LCD_Init 0990                 _LCD_putc 08A4                 _MCU_Init 0C12  
               _RCONbits 000FD0         __CFG_WDTPS$32768 000000                main@F6846 0037  
              main@c_547 0024                main@c_548 0025         __size_of_LCD_Out 0154  
            _INTCON2bits 000FF1                copy_data0 0B0C                copy_data1 0B2C  
               __Hrparam 0000                 __Lrparam 0000             __Lsmallconst 0600  
         MCU_Delayms@acc 0012        __CFG_P2BMX$PORTB5 000000              _MCU_Delayms 0BA0  
          __size_of_main 013C                 int$flags 0043               _INTCONbits 000FF2  
               intlevel2 0000               _OSCCONbits 000FD3        __CFG_T3CMX$PORTC0 000000  
             _RTCC_Count 0041        __CFG_FOSC$INTIO67 000000  
