

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Wed Aug 08 20:55:38 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    19  0000                     
    20                           ; Version 1.42
    21                           ; Generated 13/04/2017 GMT
    22                           ; 
    23                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC18F25K22 Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     
    55                           	psect	idataCOMRAM
    56  0002A4                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _colors
    60  0002A4  FF                 	db	255
    61  0002A5  00                 	db	0
    62  0002A6  00                 	db	0
    63  0002A7  8B                 	db	139
    64  0002A8  00                 	db	0
    65  0002A9  00                 	db	0
    66  0002AA  FF                 	db	255
    67  0002AB  7F                 	db	127
    68  0002AC  00                 	db	0
    69  0002AD  FF                 	db	255
    70  0002AE  FF                 	db	255
    71  0002AF  00                 	db	0
    72  0002B0  00                 	db	0
    73  0002B1  FF                 	db	255
    74  0002B2  00                 	db	0
    75  0002B3  00                 	db	0
    76  0002B4  00                 	db	0
    77  0002B5  FF                 	db	255
    78  0002B6  00                 	db	0
    79  0002B7  FF                 	db	255
    80  0002B8  FF                 	db	255
    81  0002B9  7F                 	db	127
    82  0002BA  FF                 	db	255
    83  0002BB  D4                 	db	212
    84  0002BC  4B                 	db	75
    85  0002BD  00                 	db	0
    86  0002BE  82                 	db	130
    87  0002BF  8F                 	db	143
    88  0002C0  00                 	db	0
    89  0002C1  FF                 	db	255
    90  0002C2  FF                 	db	255
    91  0002C3  FF                 	db	255
    92  0002C4  FF                 	db	255
    93  0000                     _ANSELC	set	3898
    94  0000                     _ANSELB	set	3897
    95  0000                     _ANSELA	set	3896
    96  0000                     _RCONbits	set	4048
    97  0000                     _INTCON2bits	set	4081
    98  0000                     _T0CONbits	set	4053
    99  0000                     _PORTC	set	3970
   100  0000                     _PORTB	set	3969
   101  0000                     _TRISC	set	3988
   102  0000                     _TRISB	set	3987
   103  0000                     _OSCCONbits	set	4051
   104  0000                     _TMR0L	set	4054
   105  0000                     _TMR0H	set	4055
   106  0000                     _PORTBbits	set	3969
   107  0000                     _INTCONbits	set	4082
   108                           
   109                           ; #config settings
   110  0000                     
   111                           	psect	cinit
   112  00020C                     __pcinit:
   113                           	opt stack 0
   114  00020C                     start_initialization:
   115                           	opt stack 0
   116  00020C                     __initialization:
   117                           	opt stack 0
   118                           
   119                           ; Initialize objects allocated to COMRAM (33 bytes)
   120                           ; load TBLPTR registers with __pidataCOMRAM
   121  00020C  0EA4               	movlw	low __pidataCOMRAM
   122  00020E  6EF6               	movwf	tblptrl,c
   123  000210  0E02               	movlw	high __pidataCOMRAM
   124  000212  6EF7               	movwf	tblptrh,c
   125  000214  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   126  000216  6EF8               	movwf	tblptru,c
   127  000218  EE00  F001         	lfsr	0,__pdataCOMRAM
   128  00021C  EE10 F021          	lfsr	1,33
   129  000220                     copy_data0:
   130  000220  0009               	tblrd		*+
   131  000222  CFF5 FFEE          	movff	tablat,postinc0
   132  000226  50E5               	movf	postdec1,w,c
   133  000228  50E1               	movf	fsr1l,w,c
   134  00022A  E1FA               	bnz	copy_data0
   135                           
   136                           ; Clear objects allocated to COMRAM (10 bytes)
   137  00022C  EE00  F035         	lfsr	0,__pbssCOMRAM
   138  000230  0E0A               	movlw	10
   139  000232                     clear_0:
   140  000232  6AEE               	clrf	postinc0,c
   141  000234  06E8               	decf	wreg,f,c
   142  000236  E1FD               	bnz	clear_0
   143  000238                     end_of_initialization:
   144                           	opt stack 0
   145  000238                     __end_of__initialization:
   146                           	opt stack 0
   147  000238  903F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   148  00023A  923F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   149  00023C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   150  00023E  6EF8               	movwf	tblptru,c
   151  000240  0100               	movlb	0
   152  000242  EF6B  F001         	goto	_main	;jump to C main() function
   153                           tblptru	equ	0xFF8
   154                           tblptrh	equ	0xFF7
   155                           tblptrl	equ	0xFF6
   156                           tablat	equ	0xFF5
   157                           postinc0	equ	0xFEE
   158                           wreg	equ	0xFE8
   159                           postdec1	equ	0xFE5
   160                           fsr1l	equ	0xFE1
   161                           
   162                           	psect	bssCOMRAM
   163  000035                     __pbssCOMRAM:
   164                           	opt stack 0
   165  000035                     _DuttyPWM:
   166                           	opt stack 0
   167  000035                     	ds	4
   168  000039                     _ticksRGB:
   169                           	opt stack 0
   170  000039                     	ds	2
   171  00003B                     _Ticks:
   172                           	opt stack 0
   173  00003B                     	ds	2
   174  00003D                     _color:
   175                           	opt stack 0
   176  00003D                     	ds	1
   177  00003E                     _levelColor:
   178                           	opt stack 0
   179  00003E                     	ds	1
   180                           tblptru	equ	0xFF8
   181                           tblptrh	equ	0xFF7
   182                           tblptrl	equ	0xFF6
   183                           tablat	equ	0xFF5
   184                           postinc0	equ	0xFEE
   185                           wreg	equ	0xFE8
   186                           postdec1	equ	0xFE5
   187                           fsr1l	equ	0xFE1
   188                           
   189                           	psect	dataCOMRAM
   190  000001                     __pdataCOMRAM:
   191                           	opt stack 0
   192  000001                     _colors:
   193                           	opt stack 0
   194  000001                     	ds	33
   195                           tblptru	equ	0xFF8
   196                           tblptrh	equ	0xFF7
   197                           tblptrl	equ	0xFF6
   198                           tablat	equ	0xFF5
   199                           postinc0	equ	0xFEE
   200                           wreg	equ	0xFE8
   201                           postdec1	equ	0xFE5
   202                           fsr1l	equ	0xFE1
   203                           
   204                           	psect	cstackCOMRAM
   205  000022                     __pcstackCOMRAM:
   206                           	opt stack 0
   207  000022                     ??_ISR:
   208  000022                     
   209                           ; 1 bytes @ 0x0
   210  000022                     	ds	14
   211  000030                     PWM_SetDutty@Green:
   212                           	opt stack 0
   213                           
   214                           ; 1 bytes @ 0xE
   215  000030                     	ds	1
   216  000031                     PWM_SetDutty@Blue:
   217                           	opt stack 0
   218                           
   219                           ; 1 bytes @ 0xF
   220  000031                     	ds	1
   221  000032                     PWM_SetDutty@Red:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x10
   225  000032                     	ds	1
   226  000033                     ??_demoRGBColor:
   227                           
   228                           ; 1 bytes @ 0x11
   229  000033                     	ds	2
   230  000035                     tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           postinc0	equ	0xFEE
   235                           wreg	equ	0xFE8
   236                           postdec1	equ	0xFE5
   237                           fsr1l	equ	0xFE1
   238                           
   239                           ; 1 bytes @ 0x13
   240 ;;
   241 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   242 ;;
   243 ;; *************** function _main *****************
   244 ;; Defined at:
   245 ;;		line 69 in file "main.c"
   246 ;; Parameters:    Size  Location     Type
   247 ;;		None
   248 ;; Auto vars:     Size  Location     Type
   249 ;;		None
   250 ;; Return value:  Size  Location     Type
   251 ;;                  1    wreg      void 
   252 ;; Registers used:
   253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   254 ;; Tracked objects:
   255 ;;		On entry : 0/0
   256 ;;		On exit  : 0/0
   257 ;;		Unchanged: 0/0
   258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   259 ;;      Params:         0       0       0       0       0       0       0
   260 ;;      Locals:         0       0       0       0       0       0       0
   261 ;;      Temps:          0       0       0       0       0       0       0
   262 ;;      Totals:         0       0       0       0       0       0       0
   263 ;;Total ram usage:        0 bytes
   264 ;; Hardware stack levels required when called:    3
   265 ;; This function calls:
   266 ;;		_MCU_Init
   267 ;;		_demoRGBColor
   268 ;; This function is called by:
   269 ;;		Startup code after reset
   270 ;; This function uses a non-reentrant model
   271 ;;
   272                           
   273                           	psect	text0
   274  0002D6                     __ptext0:
   275                           	opt stack 0
   276  0002D6                     _main:
   277                           	opt stack 28
   278                           
   279                           ;main.c: 70: MCU_Init();
   280                           
   281                           ;incstack = 0
   282  0002D6  EC23  F001         	call	_MCU_Init	;wreg free
   283  0002DA                     l879:
   284                           
   285                           ;main.c: 72: demoRGBColor();
   286  0002DA  EC6D  F000         	call	_demoRGBColor	;wreg free
   287  0002DE  D7FD               	goto	l879
   288  0002E0                     __end_of_main:
   289                           	opt stack 0
   290                           tblptru	equ	0xFF8
   291                           tblptrh	equ	0xFF7
   292                           tblptrl	equ	0xFF6
   293                           tablat	equ	0xFF5
   294                           postinc0	equ	0xFEE
   295                           wreg	equ	0xFE8
   296                           postdec1	equ	0xFE5
   297                           fsr1l	equ	0xFE1
   298                           
   299 ;; *************** function _demoRGBColor *****************
   300 ;; Defined at:
   301 ;;		line 121 in file "main.c"
   302 ;; Parameters:    Size  Location     Type
   303 ;;		None
   304 ;; Auto vars:     Size  Location     Type
   305 ;;		None
   306 ;; Return value:  Size  Location     Type
   307 ;;                  1    wreg      void 
   308 ;; Registers used:
   309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   310 ;; Tracked objects:
   311 ;;		On entry : 0/0
   312 ;;		On exit  : 0/0
   313 ;;		Unchanged: 0/0
   314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   315 ;;      Params:         0       0       0       0       0       0       0
   316 ;;      Locals:         0       0       0       0       0       0       0
   317 ;;      Temps:          2       0       0       0       0       0       0
   318 ;;      Totals:         2       0       0       0       0       0       0
   319 ;;Total ram usage:        2 bytes
   320 ;; Hardware stack levels used:    1
   321 ;; Hardware stack levels required when called:    2
   322 ;; This function calls:
   323 ;;		_PWM_SetDutty
   324 ;; This function is called by:
   325 ;;		_main
   326 ;; This function uses a non-reentrant model
   327 ;;
   328                           
   329                           	psect	text1
   330  0000DA                     __ptext1:
   331                           	opt stack 0
   332  0000DA                     _demoRGBColor:
   333                           	opt stack 28
   334                           
   335                           ;main.c: 122: switch (color){
   336                           
   337                           ;incstack = 0
   338  0000DA  D081               	goto	l873
   339  0000DC                     l829:
   340                           
   341                           ;main.c: 124: ++ticksRGB;
   342  0000DC  4A39               	infsnz	_ticksRGB,f,c
   343  0000DE  2A3A               	incf	_ticksRGB+1,f,c
   344                           
   345                           ;main.c: 125: if (ticksRGB == 256) {
   346  0000E0  043A               	decf	_ticksRGB+1,w,c
   347  0000E2  1039               	iorwf	_ticksRGB,w,c
   348  0000E4  A4D8               	btfss	status,2,c
   349  0000E6  D006               	goto	l835
   350                           
   351                           ;main.c: 126: color = 1;
   352  0000E8  0E01               	movlw	1
   353  0000EA  6E3D               	movwf	_color,c
   354                           
   355                           ;main.c: 127: ticksRGB = 0;
   356  0000EC  0E00               	movlw	0
   357  0000EE  6E3A               	movwf	_ticksRGB+1,c
   358  0000F0  0E00               	movlw	0
   359  0000F2  6E39               	movwf	_ticksRGB,c
   360  0000F4                     l835:
   361                           
   362                           ;main.c: 128: }
   363                           ;main.c: 129: PWM_SetDutty(ticksRGB,0,0);
   364  0000F4  0E00               	movlw	0
   365  0000F6  6E30               	movwf	PWM_SetDutty@Green,c
   366  0000F8  0E00               	movlw	0
   367  0000FA  6E31               	movwf	PWM_SetDutty@Blue,c
   368  0000FC  5039               	movf	_ticksRGB,w,c
   369  0000FE  EC63  F001         	call	_PWM_SetDutty
   370                           
   371                           ;main.c: 130: break;
   372  000102  D07B               	goto	l875
   373  000104                     l837:
   374                           
   375                           ;main.c: 132: ++ticksRGB;
   376  000104  4A39               	infsnz	_ticksRGB,f,c
   377  000106  2A3A               	incf	_ticksRGB+1,f,c
   378                           
   379                           ;main.c: 133: if (ticksRGB == 256) {
   380  000108  043A               	decf	_ticksRGB+1,w,c
   381  00010A  1039               	iorwf	_ticksRGB,w,c
   382  00010C  A4D8               	btfss	status,2,c
   383  00010E  D006               	goto	l843
   384                           
   385                           ;main.c: 134: color = 2;
   386  000110  0E02               	movlw	2
   387  000112  6E3D               	movwf	_color,c
   388                           
   389                           ;main.c: 135: ticksRGB = 0;
   390  000114  0E00               	movlw	0
   391  000116  6E3A               	movwf	_ticksRGB+1,c
   392  000118  0E00               	movlw	0
   393  00011A  6E39               	movwf	_ticksRGB,c
   394  00011C                     l843:
   395                           
   396                           ;main.c: 136: }
   397                           ;main.c: 137: PWM_SetDutty(0,ticksRGB,0);
   398  00011C  C039  F030         	movff	_ticksRGB,PWM_SetDutty@Green
   399  000120  0E00               	movlw	0
   400  000122  6E31               	movwf	PWM_SetDutty@Blue,c
   401  000124  0E00               	movlw	0
   402  000126  EC63  F001         	call	_PWM_SetDutty
   403                           
   404                           ;main.c: 138: break;
   405  00012A  D067               	goto	l875
   406  00012C                     l845:
   407                           
   408                           ;main.c: 140: ++ticksRGB;
   409  00012C  4A39               	infsnz	_ticksRGB,f,c
   410  00012E  2A3A               	incf	_ticksRGB+1,f,c
   411                           
   412                           ;main.c: 141: if (ticksRGB == 256) {
   413  000130  043A               	decf	_ticksRGB+1,w,c
   414  000132  1039               	iorwf	_ticksRGB,w,c
   415  000134  A4D8               	btfss	status,2,c
   416  000136  D006               	goto	l851
   417                           
   418                           ;main.c: 142: color = 3;
   419  000138  0E03               	movlw	3
   420  00013A  6E3D               	movwf	_color,c
   421                           
   422                           ;main.c: 143: ticksRGB = 0;
   423  00013C  0E00               	movlw	0
   424  00013E  6E3A               	movwf	_ticksRGB+1,c
   425  000140  0E00               	movlw	0
   426  000142  6E39               	movwf	_ticksRGB,c
   427  000144                     l851:
   428                           
   429                           ;main.c: 144: }
   430                           ;main.c: 145: PWM_SetDutty(0,0,ticksRGB);
   431  000144  0E00               	movlw	0
   432  000146  6E30               	movwf	PWM_SetDutty@Green,c
   433  000148  C039  F031         	movff	_ticksRGB,PWM_SetDutty@Blue
   434  00014C  0E00               	movlw	0
   435  00014E  EC63  F001         	call	_PWM_SetDutty
   436                           
   437                           ;main.c: 146: break;
   438  000152  D053               	goto	l875
   439  000154                     l853:
   440                           
   441                           ;main.c: 148: for(levelColor=0; levelColor<11; levelColor++){
   442  000154  0E00               	movlw	0
   443  000156  6E3E               	movwf	_levelColor,c
   444  000158                     l855:
   445  000158  0E0A               	movlw	10
   446  00015A  643E               	cpfsgt	_levelColor,c
   447  00015C  D001               	goto	l859
   448  00015E  D035               	goto	l867
   449  000160                     l859:
   450                           
   451                           ;main.c: 149: PWM_SetDutty(colors[levelColor][0], colors[levelColor][1], colors[levelCol
      +                          or][2]);
   452  000160  503E               	movf	_levelColor,w,c
   453  000162  0D03               	mullw	3
   454  000164  0E01               	movlw	1
   455  000166  26F3               	addwf	prodl,f,c
   456  000168  0E00               	movlw	0
   457  00016A  22F4               	addwfc	prodh,f,c
   458  00016C  0E01               	movlw	low _colors
   459  00016E  24F3               	addwf	prodl,w,c
   460  000170  6ED9               	movwf	fsr2l,c
   461  000172  0E00               	movlw	high _colors
   462  000174  20F4               	addwfc	prodh,w,c
   463  000176  6EDA               	movwf	fsr2h,c
   464  000178  50DF               	movf	indf2,w,c
   465  00017A  6E30               	movwf	PWM_SetDutty@Green,c
   466  00017C  503E               	movf	_levelColor,w,c
   467  00017E  0D03               	mullw	3
   468  000180  0E02               	movlw	2
   469  000182  26F3               	addwf	prodl,f,c
   470  000184  0E00               	movlw	0
   471  000186  22F4               	addwfc	prodh,f,c
   472  000188  0E01               	movlw	low _colors
   473  00018A  24F3               	addwf	prodl,w,c
   474  00018C  6ED9               	movwf	fsr2l,c
   475  00018E  0E00               	movlw	high _colors
   476  000190  20F4               	addwfc	prodh,w,c
   477  000192  6EDA               	movwf	fsr2h,c
   478  000194  50DF               	movf	indf2,w,c
   479  000196  6E31               	movwf	PWM_SetDutty@Blue,c
   480  000198  503E               	movf	_levelColor,w,c
   481  00019A  0D03               	mullw	3
   482  00019C  0E01               	movlw	low _colors
   483  00019E  24F3               	addwf	prodl,w,c
   484  0001A0  6ED9               	movwf	fsr2l,c
   485  0001A2  0E00               	movlw	high _colors
   486  0001A4  20F4               	addwfc	prodh,w,c
   487  0001A6  6EDA               	movwf	fsr2h,c
   488  0001A8  50DF               	movf	indf2,w,c
   489  0001AA  EC63  F001         	call	_PWM_SetDutty
   490                           
   491                           ;main.c: 150: _delay((unsigned long)((1000)*(16000000/4000.0)));
   492  0001AE  0E15               	movlw	21
   493  0001B0  6E34               	movwf	(??_demoRGBColor+1)& (0+255),c
   494  0001B2  0E4B               	movlw	75
   495  0001B4  6E33               	movwf	??_demoRGBColor& (0+255),c
   496  0001B6  0EBE               	movlw	190
   497  0001B8                     u167:
   498  0001B8  2EE8               	decfsz	wreg,f,c
   499  0001BA  D7FE               	bra	u167
   500  0001BC  2E33               	decfsz	??_demoRGBColor& (0+255),f,c
   501  0001BE  D7FC               	bra	u167
   502  0001C0  2E34               	decfsz	(??_demoRGBColor+1)& (0+255),f,c
   503  0001C2  D7FA               	bra	u167
   504  0001C4  D000               	nop2	
   505  0001C6  2A3E               	incf	_levelColor,f,c
   506  0001C8  D7C7               	goto	l855
   507  0001CA                     l867:
   508                           
   509                           ;main.c: 151: }
   510                           ;main.c: 152: color=0;
   511  0001CA  0E00               	movlw	0
   512  0001CC  6E3D               	movwf	_color,c
   513                           
   514                           ;main.c: 153: break;
   515  0001CE  D015               	goto	l875
   516  0001D0                     l869:
   517                           
   518                           ;main.c: 155: color = 0;
   519  0001D0  0E00               	movlw	0
   520  0001D2  6E3D               	movwf	_color,c
   521                           
   522                           ;main.c: 156: ticksRGB = 0;
   523  0001D4  0E00               	movlw	0
   524  0001D6  6E3A               	movwf	_ticksRGB+1,c
   525  0001D8  0E00               	movlw	0
   526  0001DA  6E39               	movwf	_ticksRGB,c
   527                           
   528                           ;main.c: 158: }
   529                           
   530                           ;main.c: 157: break;
   531  0001DC  D00E               	goto	l875
   532  0001DE                     l873:
   533  0001DE  503D               	movf	_color,w,c
   534                           
   535                           ; Switch size 1, requested type "space"
   536                           ; Number of cases is 4, Range of values is 0 to 3
   537                           ; switch strategies available:
   538                           ; Name         Instructions Cycles
   539                           ; simple_byte           13     7 (average)
   540                           ;	Chosen strategy is simple_byte
   541  0001E0  0A00               	xorlw	0	; case 0
   542  0001E2  B4D8               	btfsc	status,2,c
   543  0001E4  D77B               	goto	l829
   544  0001E6  0A01               	xorlw	1	; case 1
   545  0001E8  B4D8               	btfsc	status,2,c
   546  0001EA  D78C               	goto	l837
   547  0001EC  0A03               	xorlw	3	; case 2
   548  0001EE  B4D8               	btfsc	status,2,c
   549  0001F0  D79D               	goto	l845
   550  0001F2  0A01               	xorlw	1	; case 3
   551  0001F4  B4D8               	btfsc	status,2,c
   552  0001F6  D7AE               	goto	l853
   553  0001F8  D7EB               	goto	l869
   554  0001FA                     l875:
   555                           
   556                           ;main.c: 159: _delay((unsigned long)((30)*(16000000/4000.0)));
   557  0001FA  0E9C               	movlw	156
   558  0001FC  6E33               	movwf	??_demoRGBColor& (0+255),c
   559  0001FE  0ED7               	movlw	215
   560  000200                     u177:
   561  000200  2EE8               	decfsz	wreg,f,c
   562  000202  D7FE               	bra	u177
   563  000204  2E33               	decfsz	??_demoRGBColor& (0+255),f,c
   564  000206  D7FC               	bra	u177
   565  000208  F000               	nop	
   566  00020A  0012               	return		;funcret
   567  00020C                     __end_of_demoRGBColor:
   568                           	opt stack 0
   569                           tblptru	equ	0xFF8
   570                           tblptrh	equ	0xFF7
   571                           tblptrl	equ	0xFF6
   572                           tablat	equ	0xFF5
   573                           prodh	equ	0xFF4
   574                           prodl	equ	0xFF3
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           postdec1	equ	0xFE5
   578                           fsr1l	equ	0xFE1
   579                           indf2	equ	0xFDF
   580                           fsr2h	equ	0xFDA
   581                           fsr2l	equ	0xFD9
   582                           status	equ	0xFD8
   583                           
   584 ;; *************** function _PWM_SetDutty *****************
   585 ;; Defined at:
   586 ;;		line 114 in file "main.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;  Red             1    wreg     unsigned char 
   589 ;;  Green           1   14[COMRAM] unsigned char 
   590 ;;  Blue            1   15[COMRAM] unsigned char 
   591 ;; Auto vars:     Size  Location     Type
   592 ;;  Red             1   16[COMRAM] unsigned char 
   593 ;; Return value:  Size  Location     Type
   594 ;;                  1    wreg      void 
   595 ;; Registers used:
   596 ;;		wreg
   597 ;; Tracked objects:
   598 ;;		On entry : 0/0
   599 ;;		On exit  : 0/0
   600 ;;		Unchanged: 0/0
   601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   602 ;;      Params:         2       0       0       0       0       0       0
   603 ;;      Locals:         1       0       0       0       0       0       0
   604 ;;      Temps:          0       0       0       0       0       0       0
   605 ;;      Totals:         3       0       0       0       0       0       0
   606 ;;Total ram usage:        3 bytes
   607 ;; Hardware stack levels used:    1
   608 ;; Hardware stack levels required when called:    1
   609 ;; This function calls:
   610 ;;		Nothing
   611 ;; This function is called by:
   612 ;;		_demoRGBColor
   613 ;; This function uses a non-reentrant model
   614 ;;
   615                           
   616                           	psect	text2
   617  0002C6                     __ptext2:
   618                           	opt stack 0
   619  0002C6                     _PWM_SetDutty:
   620                           	opt stack 28
   621                           
   622                           ;incstack = 0
   623                           ;PWM_SetDutty@Red stored from wreg
   624  0002C6  6E32               	movwf	PWM_SetDutty@Red,c
   625                           
   626                           ;main.c: 116: DuttyPWM[0] = Red;
   627  0002C8  C032  F035         	movff	PWM_SetDutty@Red,_DuttyPWM
   628                           
   629                           ;main.c: 117: DuttyPWM[1] = Green;
   630  0002CC  C030  F036         	movff	PWM_SetDutty@Green,_DuttyPWM+1
   631                           
   632                           ;main.c: 118: DuttyPWM[2] = Blue;
   633  0002D0  C031  F037         	movff	PWM_SetDutty@Blue,_DuttyPWM+2
   634  0002D4  0012               	return		;funcret
   635  0002D6                     __end_of_PWM_SetDutty:
   636                           	opt stack 0
   637                           tblptru	equ	0xFF8
   638                           tblptrh	equ	0xFF7
   639                           tblptrl	equ	0xFF6
   640                           tablat	equ	0xFF5
   641                           prodh	equ	0xFF4
   642                           prodl	equ	0xFF3
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1l	equ	0xFE1
   647                           indf2	equ	0xFDF
   648                           fsr2h	equ	0xFDA
   649                           fsr2l	equ	0xFD9
   650                           status	equ	0xFD8
   651                           
   652 ;; *************** function _MCU_Init *****************
   653 ;; Defined at:
   654 ;;		line 76 in file "main.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;		None
   659 ;; Return value:  Size  Location     Type
   660 ;;                  1    wreg      void 
   661 ;; Registers used:
   662 ;;		wreg, status,2, cstack
   663 ;; Tracked objects:
   664 ;;		On entry : 0/0
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   668 ;;      Params:         0       0       0       0       0       0       0
   669 ;;      Locals:         0       0       0       0       0       0       0
   670 ;;      Temps:          0       0       0       0       0       0       0
   671 ;;      Totals:         0       0       0       0       0       0       0
   672 ;;Total ram usage:        0 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    2
   675 ;; This function calls:
   676 ;;		_PWM_Init
   677 ;; This function is called by:
   678 ;;		_main
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text3
   683  000246                     __ptext3:
   684                           	opt stack 0
   685  000246                     _MCU_Init:
   686                           	opt stack 28
   687                           
   688                           ;main.c: 78: ANSELA = 0;
   689                           
   690                           ;incstack = 0
   691  000246  0E00               	movlw	0
   692  000248  010F               	movlb	15	; () banked
   693  00024A  6F38               	movwf	56,b	;volatile
   694                           
   695                           ;main.c: 79: ANSELB = 0;
   696  00024C  0E00               	movlw	0
   697  00024E  010F               	movlb	15	; () banked
   698  000250  6F39               	movwf	57,b	;volatile
   699                           
   700                           ;main.c: 80: ANSELC = 0;
   701  000252  0E00               	movlw	0
   702  000254  010F               	movlb	15	; () banked
   703  000256  6F3A               	movwf	58,b	;volatile
   704                           
   705                           ; BSR set to: 15
   706                           ;main.c: 82: OSCCONbits.IRCF=0b111;
   707  000258  88D3               	bsf	4051,4,c	;volatile
   708  00025A  8AD3               	bsf	4051,5,c	;volatile
   709  00025C  8CD3               	bsf	4051,6,c	;volatile
   710                           
   711                           ;main.c: 84: TRISB = 0x00;
   712  00025E  0E00               	movlw	0
   713  000260  6E93               	movwf	3987,c	;volatile
   714                           
   715                           ;main.c: 85: TRISC = 0x00;
   716  000262  0E00               	movlw	0
   717  000264  6E94               	movwf	3988,c	;volatile
   718                           
   719                           ;main.c: 87: PORTB = 0x00;
   720  000266  0E00               	movlw	0
   721  000268  6E81               	movwf	3969,c	;volatile
   722                           
   723                           ;main.c: 88: PORTC = 0x00;
   724  00026A  0E00               	movlw	0
   725  00026C  6E82               	movwf	3970,c	;volatile
   726                           
   727                           ;main.c: 90: DuttyPWM[0] = 0;
   728  00026E  0E00               	movlw	0
   729  000270  6E35               	movwf	_DuttyPWM,c
   730                           
   731                           ;main.c: 91: DuttyPWM[1] = 0;
   732  000272  0E00               	movlw	0
   733  000274  6E36               	movwf	_DuttyPWM+1,c
   734                           
   735                           ;main.c: 92: DuttyPWM[2] = 0;
   736  000276  0E00               	movlw	0
   737  000278  6E37               	movwf	_DuttyPWM+2,c
   738                           
   739                           ; BSR set to: 15
   740                           ;main.c: 94: PWM_Init();
   741  00027A  EC40  F001         	call	_PWM_Init	;wreg free
   742  00027E  0012               	return		;funcret
   743  000280                     __end_of_MCU_Init:
   744                           	opt stack 0
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           prodh	equ	0xFF4
   750                           prodl	equ	0xFF3
   751                           postinc0	equ	0xFEE
   752                           wreg	equ	0xFE8
   753                           postdec1	equ	0xFE5
   754                           fsr1l	equ	0xFE1
   755                           indf2	equ	0xFDF
   756                           fsr2h	equ	0xFDA
   757                           fsr2l	equ	0xFD9
   758                           status	equ	0xFD8
   759                           
   760 ;; *************** function _PWM_Init *****************
   761 ;; Defined at:
   762 ;;		line 97 in file "main.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;		None
   765 ;; Auto vars:     Size  Location     Type
   766 ;;		None
   767 ;; Return value:  Size  Location     Type
   768 ;;                  1    wreg      void 
   769 ;; Registers used:
   770 ;;		wreg, status,2
   771 ;; Tracked objects:
   772 ;;		On entry : 0/0
   773 ;;		On exit  : 0/0
   774 ;;		Unchanged: 0/0
   775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   776 ;;      Params:         0       0       0       0       0       0       0
   777 ;;      Locals:         0       0       0       0       0       0       0
   778 ;;      Temps:          0       0       0       0       0       0       0
   779 ;;      Totals:         0       0       0       0       0       0       0
   780 ;;Total ram usage:        0 bytes
   781 ;; Hardware stack levels used:    1
   782 ;; Hardware stack levels required when called:    1
   783 ;; This function calls:
   784 ;;		Nothing
   785 ;; This function is called by:
   786 ;;		_MCU_Init
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text4
   791  000280                     __ptext4:
   792                           	opt stack 0
   793  000280                     _PWM_Init:
   794                           	opt stack 28
   795                           
   796                           ;main.c: 99: T0CONbits.TMR0ON = 1;
   797                           
   798                           ;incstack = 0
   799  000280  8ED5               	bsf	4053,7,c	;volatile
   800                           
   801                           ;main.c: 100: T0CONbits.T08BIT = 1;
   802  000282  8CD5               	bsf	4053,6,c	;volatile
   803                           
   804                           ;main.c: 101: T0CONbits.T0CS = 0;
   805  000284  9AD5               	bcf	4053,5,c	;volatile
   806                           
   807                           ;main.c: 102: T0CONbits.T0SE = 0;
   808  000286  98D5               	bcf	4053,4,c	;volatile
   809                           
   810                           ;main.c: 103: T0CONbits.PSA = 0;
   811  000288  96D5               	bcf	4053,3,c	;volatile
   812                           
   813                           ;main.c: 104: T0CONbits.T0PS = 0b000;
   814  00028A  90D5               	bcf	4053,0,c	;volatile
   815  00028C  92D5               	bcf	4053,1,c	;volatile
   816  00028E  94D5               	bcf	4053,2,c	;volatile
   817                           
   818                           ;main.c: 105: TMR0H = 0x00;
   819  000290  0E00               	movlw	0
   820  000292  6ED7               	movwf	4055,c	;volatile
   821                           
   822                           ;main.c: 106: TMR0L = 0xB2;
   823  000294  0EB2               	movlw	178
   824  000296  6ED6               	movwf	4054,c	;volatile
   825                           
   826                           ;main.c: 107: INTCONbits.TMR0IF = 0;
   827  000298  94F2               	bcf	intcon,2,c	;volatile
   828                           
   829                           ;main.c: 108: INTCONbits.TMR0IE = 1;
   830  00029A  8AF2               	bsf	intcon,5,c	;volatile
   831                           
   832                           ;main.c: 109: INTCON2bits.TMR0IP = 1;
   833  00029C  84F1               	bsf	intcon2,2,c	;volatile
   834                           
   835                           ;main.c: 110: RCONbits.IPEN = 1;
   836  00029E  8ED0               	bsf	4048,7,c	;volatile
   837                           
   838                           ;main.c: 111: INTCONbits.GIEH = 1;
   839  0002A0  8EF2               	bsf	intcon,7,c	;volatile
   840  0002A2  0012               	return		;funcret
   841  0002A4                     __end_of_PWM_Init:
   842                           	opt stack 0
   843                           tblptru	equ	0xFF8
   844                           tblptrh	equ	0xFF7
   845                           tblptrl	equ	0xFF6
   846                           tablat	equ	0xFF5
   847                           prodh	equ	0xFF4
   848                           prodl	equ	0xFF3
   849                           intcon	equ	0xFF2
   850                           intcon2	equ	0xFF1
   851                           postinc0	equ	0xFEE
   852                           wreg	equ	0xFE8
   853                           postdec1	equ	0xFE5
   854                           fsr1l	equ	0xFE1
   855                           indf2	equ	0xFDF
   856                           fsr2h	equ	0xFDA
   857                           fsr2l	equ	0xFD9
   858                           status	equ	0xFD8
   859                           
   860 ;; *************** function _ISR *****************
   861 ;; Defined at:
   862 ;;		line 48 in file "main.c"
   863 ;; Parameters:    Size  Location     Type
   864 ;;		None
   865 ;; Auto vars:     Size  Location     Type
   866 ;;		None
   867 ;; Return value:  Size  Location     Type
   868 ;;                  1    wreg      void 
   869 ;; Registers used:
   870 ;;		wreg, status,2, status,0
   871 ;; Tracked objects:
   872 ;;		On entry : 0/0
   873 ;;		On exit  : 0/0
   874 ;;		Unchanged: 0/0
   875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   876 ;;      Params:         0       0       0       0       0       0       0
   877 ;;      Locals:         0       0       0       0       0       0       0
   878 ;;      Temps:         14       0       0       0       0       0       0
   879 ;;      Totals:        14       0       0       0       0       0       0
   880 ;;Total ram usage:       14 bytes
   881 ;; Hardware stack levels used:    1
   882 ;; This function calls:
   883 ;;		Nothing
   884 ;; This function is called by:
   885 ;;		Interrupt level 2
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	intcode
   890  000008                     __pintcode:
   891                           	opt stack 0
   892  000008                     _ISR:
   893                           	opt stack 28
   894                           
   895                           ;incstack = 0
   896  000008  823F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   897  00000A  CFFA F022          	movff	pclath,??_ISR
   898  00000E  CFFB F023          	movff	pclatu,??_ISR+1
   899  000012  CFE9 F024          	movff	fsr0l,??_ISR+2
   900  000016  CFEA F025          	movff	fsr0h,??_ISR+3
   901  00001A  CFE1 F026          	movff	fsr1l,??_ISR+4
   902  00001E  CFE2 F027          	movff	fsr1h,??_ISR+5
   903  000022  CFD9 F028          	movff	fsr2l,??_ISR+6
   904  000026  CFDA F029          	movff	fsr2h,??_ISR+7
   905  00002A  CFF3 F02A          	movff	prodl,??_ISR+8
   906  00002E  CFF4 F02B          	movff	prodh,??_ISR+9
   907  000032  CFF6 F02C          	movff	tblptrl,??_ISR+10
   908  000036  CFF7 F02D          	movff	tblptrh,??_ISR+11
   909  00003A  CFF8 F02E          	movff	tblptru,??_ISR+12
   910  00003E  CFF5 F02F          	movff	tablat,??_ISR+13
   911                           
   912                           ;main.c: 49: if(INTCONbits.TMR0IF){
   913  000042  A4F2               	btfss	intcon,2,c	;volatile
   914  000044  D02A               	goto	i2l63
   915                           
   916                           ;main.c: 51: if (Ticks == 256) Ticks = 0;
   917  000046  043C               	decf	_Ticks+1,w,c
   918  000048  103B               	iorwf	_Ticks,w,c
   919  00004A  A4D8               	btfss	status,2,c
   920  00004C  D004               	goto	i2l799
   921  00004E  0E00               	movlw	0
   922  000050  6E3C               	movwf	_Ticks+1,c
   923  000052  0E00               	movlw	0
   924  000054  6E3B               	movwf	_Ticks,c
   925  000056                     i2l799:
   926                           
   927                           ;main.c: 52: ++Ticks;
   928  000056  4A3B               	infsnz	_Ticks,f,c
   929  000058  2A3C               	incf	_Ticks+1,f,c
   930                           
   931                           ;main.c: 54: if (Ticks < DuttyPWM[0]) PORTBbits.RB0 = 1;
   932  00005A  5035               	movf	_DuttyPWM,w,c
   933  00005C  5C3B               	subwf	_Ticks,w,c
   934  00005E  0E00               	movlw	0
   935  000060  583C               	subwfb	_Ticks+1,w,c
   936  000062  B0D8               	btfsc	status,0,c
   937  000064  D002               	goto	i2l57
   938  000066  8081               	bsf	3969,0,c	;volatile
   939  000068  D001               	goto	i2l805
   940  00006A                     i2l57:
   941                           
   942                           ;main.c: 55: else PORTBbits.RB0 = 0;
   943  00006A  9081               	bcf	3969,0,c	;volatile
   944  00006C                     i2l805:
   945                           
   946                           ;main.c: 57: if (Ticks < DuttyPWM[1]) PORTBbits.RB1 = 1;
   947  00006C  5036               	movf	_DuttyPWM+1,w,c
   948  00006E  5C3B               	subwf	_Ticks,w,c
   949  000070  0E00               	movlw	0
   950  000072  583C               	subwfb	_Ticks+1,w,c
   951  000074  B0D8               	btfsc	status,0,c
   952  000076  D002               	goto	i2l59
   953  000078  8281               	bsf	3969,1,c	;volatile
   954  00007A  D001               	goto	i2l809
   955  00007C                     i2l59:
   956                           
   957                           ;main.c: 58: else PORTBbits.RB1 = 0;
   958  00007C  9281               	bcf	3969,1,c	;volatile
   959  00007E                     i2l809:
   960                           
   961                           ;main.c: 60: if (Ticks < DuttyPWM[2]) PORTBbits.RB2 = 1;
   962  00007E  5037               	movf	_DuttyPWM+2,w,c
   963  000080  5C3B               	subwf	_Ticks,w,c
   964  000082  0E00               	movlw	0
   965  000084  583C               	subwfb	_Ticks+1,w,c
   966  000086  B0D8               	btfsc	status,0,c
   967  000088  D002               	goto	i2l61
   968  00008A  8481               	bsf	3969,2,c	;volatile
   969  00008C  D001               	goto	i2l813
   970  00008E                     i2l61:
   971                           
   972                           ;main.c: 61: else PORTBbits.RB2 = 0;
   973  00008E  9481               	bcf	3969,2,c	;volatile
   974  000090                     i2l813:
   975                           
   976                           ;main.c: 63: TMR0H = 0x00;
   977  000090  0E00               	movlw	0
   978  000092  6ED7               	movwf	4055,c	;volatile
   979                           
   980                           ;main.c: 64: TMR0L = 0xB2;
   981  000094  0EB2               	movlw	178
   982  000096  6ED6               	movwf	4054,c	;volatile
   983                           
   984                           ;main.c: 65: INTCONbits.TMR0IF = 0;
   985  000098  94F2               	bcf	intcon,2,c	;volatile
   986  00009A                     i2l63:
   987  00009A  C02F  FFF5         	movff	??_ISR+13,tablat
   988  00009E  C02E  FFF8         	movff	??_ISR+12,tblptru
   989  0000A2  C02D  FFF7         	movff	??_ISR+11,tblptrh
   990  0000A6  C02C  FFF6         	movff	??_ISR+10,tblptrl
   991  0000AA  C02B  FFF4         	movff	??_ISR+9,prodh
   992  0000AE  C02A  FFF3         	movff	??_ISR+8,prodl
   993  0000B2  C029  FFDA         	movff	??_ISR+7,fsr2h
   994  0000B6  C028  FFD9         	movff	??_ISR+6,fsr2l
   995  0000BA  C027  FFE2         	movff	??_ISR+5,fsr1h
   996  0000BE  C026  FFE1         	movff	??_ISR+4,fsr1l
   997  0000C2  C025  FFEA         	movff	??_ISR+3,fsr0h
   998  0000C6  C024  FFE9         	movff	??_ISR+2,fsr0l
   999  0000CA  C023  FFFB         	movff	??_ISR+1,pclatu
  1000  0000CE  C022  FFFA         	movff	??_ISR,pclath
  1001  0000D2  923F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  1002  0000D4  0011               	retfie		f
  1003  0000D6                     __end_of_ISR:
  1004                           	opt stack 0
  1005  0000                     pclatu	equ	0xFFB
  1006                           pclath	equ	0xFFA
  1007                           tblptru	equ	0xFF8
  1008                           tblptrh	equ	0xFF7
  1009                           tblptrl	equ	0xFF6
  1010                           tablat	equ	0xFF5
  1011                           prodh	equ	0xFF4
  1012                           prodl	equ	0xFF3
  1013                           intcon	equ	0xFF2
  1014                           intcon2	equ	0xFF1
  1015                           postinc0	equ	0xFEE
  1016                           fsr0h	equ	0xFEA
  1017                           fsr0l	equ	0xFE9
  1018                           wreg	equ	0xFE8
  1019                           postdec1	equ	0xFE5
  1020                           fsr1h	equ	0xFE2
  1021                           fsr1l	equ	0xFE1
  1022                           indf2	equ	0xFDF
  1023                           fsr2h	equ	0xFDA
  1024                           fsr2l	equ	0xFD9
  1025                           status	equ	0xFD8
  1026                           pclatu	equ	0xFFB
  1027                           pclath	equ	0xFFA
  1028                           tblptru	equ	0xFF8
  1029                           tblptrh	equ	0xFF7
  1030                           tblptrl	equ	0xFF6
  1031                           tablat	equ	0xFF5
  1032                           prodh	equ	0xFF4
  1033                           prodl	equ	0xFF3
  1034                           intcon	equ	0xFF2
  1035                           intcon2	equ	0xFF1
  1036                           postinc0	equ	0xFEE
  1037                           fsr0h	equ	0xFEA
  1038                           fsr0l	equ	0xFE9
  1039                           wreg	equ	0xFE8
  1040                           postdec1	equ	0xFE5
  1041                           fsr1h	equ	0xFE2
  1042                           fsr1l	equ	0xFE1
  1043                           indf2	equ	0xFDF
  1044                           fsr2h	equ	0xFDA
  1045                           fsr2l	equ	0xFD9
  1046                           status	equ	0xFD8
  1047                           
  1048                           	psect	rparam
  1049  0000                     pclatu	equ	0xFFB
  1050                           pclath	equ	0xFFA
  1051                           tblptru	equ	0xFF8
  1052                           tblptrh	equ	0xFF7
  1053                           tblptrl	equ	0xFF6
  1054                           tablat	equ	0xFF5
  1055                           prodh	equ	0xFF4
  1056                           prodl	equ	0xFF3
  1057                           intcon	equ	0xFF2
  1058                           intcon2	equ	0xFF1
  1059                           postinc0	equ	0xFEE
  1060                           fsr0h	equ	0xFEA
  1061                           fsr0l	equ	0xFE9
  1062                           wreg	equ	0xFE8
  1063                           postdec1	equ	0xFE5
  1064                           fsr1h	equ	0xFE2
  1065                           fsr1l	equ	0xFE1
  1066                           indf2	equ	0xFDF
  1067                           fsr2h	equ	0xFDA
  1068                           fsr2l	equ	0xFD9
  1069                           status	equ	0xFD8
  1070                           
  1071                           	psect	temp
  1072  00003F                     btemp:
  1073                           	opt stack 0
  1074  00003F                     	ds	1
  1075  0000                     int$flags	set	btemp
  1076                           pclatu	equ	0xFFB
  1077                           pclath	equ	0xFFA
  1078                           tblptru	equ	0xFF8
  1079                           tblptrh	equ	0xFF7
  1080                           tblptrl	equ	0xFF6
  1081                           tablat	equ	0xFF5
  1082                           prodh	equ	0xFF4
  1083                           prodl	equ	0xFF3
  1084                           intcon	equ	0xFF2
  1085                           intcon2	equ	0xFF1
  1086                           postinc0	equ	0xFEE
  1087                           fsr0h	equ	0xFEA
  1088                           fsr0l	equ	0xFE9
  1089                           wreg	equ	0xFE8
  1090                           postdec1	equ	0xFE5
  1091                           fsr1h	equ	0xFE2
  1092                           fsr1l	equ	0xFE1
  1093                           indf2	equ	0xFDF
  1094                           fsr2h	equ	0xFDA
  1095                           fsr2l	equ	0xFD9
  1096                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        33
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     19      62
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_demoRGBColor
    _demoRGBColor->_PWM_SetDutty

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     674
                           _MCU_Init
                       _demoRGBColor
 ---------------------------------------------------------------------------------
 (1) _demoRGBColor                                         2     2      0     674
                                             17 COMRAM     2     2      0
                       _PWM_SetDutty
 ---------------------------------------------------------------------------------
 (2) _PWM_SetDutty                                         3     1      2     674
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _MCU_Init                                             0     0      0       0
                           _PWM_Init
 ---------------------------------------------------------------------------------
 (2) _PWM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MCU_Init
     _PWM_Init
   _demoRGBColor
     _PWM_SetDutty

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     13      3E       1       66.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      3E       9        0.0%
DATA                 0      0      3E      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Aug 08 20:55:38 2018

  __size_of_PWM_SetDutty 0010     __end_of_demoRGBColor 020C             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
                    l851 0144                      l843 011C                      l835 00F4  
                    l853 0154                      l845 012C                      l837 0104  
                    l829 00DC                      l855 0158                      l873 01DE  
                    l867 01CA                      l859 0160                      l875 01FA  
                    l869 01D0                      l879 02DA             __CFG_CPB$OFF 000000  
                    u167 01B8                      u177 0200             __CFG_CPD$OFF 000000  
                    _ISR 0008                      prod 000FF3                      wreg 000FE8  
        PWM_SetDutty@Red 0032             __CFG_LVP$OFF 000000                     ?_ISR 0022  
                   i2l61 008E                     i2l63 009A                     i2l57 006A  
                   i2l59 007C                     _main 02D6                     fsr0h 000FEA  
                   fsr1h 000FE2                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 003F            __CFG_BORV$190 000000                     prodh 000FF4  
                   prodl 000FF3                     start 00D6             _PWM_SetDutty 02C6  
          __CFG_IESO$OFF 000000         PWM_SetDutty@Blue 0031             ___param_bank 000000  
                  ??_ISR 0022                    ?_main 0022         __end_of_MCU_Init 0280  
                  i2l813 0090                    i2l805 006C                    i2l809 007E  
                  i2l799 0056                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTB 000F81                    _PORTC 000F82                    _TRISB 000F93  
                  _TRISC 000F94            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000                    _Ticks 003B            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000  
                  _color 003D       __CFG_MCLRE$EXTMCLR 000000           __CFG_BOREN$OFF 000000  
                  pclath 000FFA         __end_of_PWM_Init 02A4                    tablat 000FF5  
                  status 000FD8        PWM_SetDutty@Green 0030          __initialization 020C  
           __end_of_main 02E0                   ??_main 0035            __activetblptr 000002  
                 _ANSELA 000F38                   _ANSELB 000F39                   _ANSELC 000F3A  
         __CFG_WDTEN$OFF 000000           __CFG_XINST$OFF 000000    __size_of_demoRGBColor 0132  
         __CFG_STVREN$ON 000000                   _colors 0001                   clear_0 0232  
           __pdataCOMRAM 0001                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8          __CFG_HFOFST$OFF 000000             _demoRGBColor 00DA  
             __accesstop 0060  __end_of__initialization 0238          __CFG_PBADEN$OFF 000000  
          ___rparam_used 000001                ?_MCU_Init 0022           __pcstackCOMRAM 0022  
              ?_PWM_Init 0022          __CFG_PLLCFG$OFF 000000               ??_MCU_Init 0030  
     __CFG_CCP2MX$PORTC1 000000       __CFG_CCP3MX$PORTB5 000000               ??_PWM_Init 0030  
        __CFG_PWRTEN$OFF 000000                  __Hparam 0000                  __Lparam 0000  
             _levelColor 003E                  __pcinit 020C                  __ramtop 0600  
                __ptext0 02D6                  __ptext1 00DA                  __ptext2 02C6  
                __ptext3 0246                  __ptext4 0280                _T0CONbits 000FD5  
           __size_of_ISR 00CE     end_of_initialization 0238            __Lmediumconst 0000  
                postdec1 000FE5                  postinc0 000FEE                _PORTBbits 000F81  
      __size_of_MCU_Init 003A            __pidataCOMRAM 02A4        __size_of_PWM_Init 0024  
    start_initialization 020C              __end_of_ISR 00D6            ?_PWM_SetDutty 0030  
            __pbssCOMRAM 0035           ??_PWM_SetDutty 0032                __pintcode 0008  
       __CFG_PRICLKEN$ON 000000                 _MCU_Init 0246                 _RCONbits 000FD0  
       __CFG_WDTPS$32768 000000                 _PWM_Init 0280              _INTCON2bits 000FF1  
              copy_data0 0220            ?_demoRGBColor 0022                 _DuttyPWM 0035  
               __Hrparam 0000                 __Lrparam 0000        __CFG_P2BMX$PORTB5 000000  
   __end_of_PWM_SetDutty 02D6           ??_demoRGBColor 0033            __size_of_main 000A  
               _ticksRGB 0039                 int$flags 003F               _INTCONbits 000FF2  
               intlevel2 0000               _OSCCONbits 000FD3        __CFG_T3CMX$PORTC0 000000  
      __CFG_FOSC$INTIO67 000000  
